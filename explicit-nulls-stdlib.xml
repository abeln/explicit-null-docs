<null-stats>
    <class>
        <name>org.xml.sax.InputSource</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.xml.sax.EntityResolver</name>
        <fields></fields>
        <methods>
            <method>
                <name>resolveEntity</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.xml.sax.ext.EntityResolver2</name>
        <fields></fields>
        <methods>
            <method>
                <name>getExternalSubset</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>resolveEntity</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;
                </desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.NamedNodeMap</name>
        <fields></fields>
        <methods>
            <method>
                <name>getNamedItem</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNamedItem</name>
                <desc>(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNamedItem</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>item</name>
                <desc>(I)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNamedItemNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNamedItemNS</name>
                <desc>(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNamedItemNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.Text</name>
        <fields></fields>
        <methods>
            <method>
                <name>splitText</name>
                <desc>(I)Lorg/w3c/dom/Text;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isElementContentWhitespace</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getWholeText</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceWholeText</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Text;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.Document</name>
        <fields></fields>
        <methods>
            <method>
                <name>getImplementation</name>
                <desc>()Lorg/w3c/dom/DOMImplementation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDocumentElement</name>
                <desc>()Lorg/w3c/dom/Element;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>createElement</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Element;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createDocumentFragment</name>
                <desc>()Lorg/w3c/dom/DocumentFragment;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>createTextNode</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Text;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createComment</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Comment;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createCDATASection</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/CDATASection;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createProcessingInstruction</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/ProcessingInstruction;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createAttribute</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createEntityReference</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/EntityReference;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getElementsByTagName</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/NodeList;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>importNode</name>
                <desc>(Lorg/w3c/dom/Node;Z)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createElementNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/Element;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createAttributeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getElementsByTagNameNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/NodeList;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getElementById</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Element;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getXmlStandalone</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setXmlStandalone</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setXmlVersion</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getStrictErrorChecking</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setStrictErrorChecking</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDomConfig</name>
                <desc>()Lorg/w3c/dom/DOMConfiguration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>renameNode</name>
                <desc>(Lorg/w3c/dom/Node;Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.CharacterData</name>
        <fields></fields>
        <methods>
            <method>
                <name>getData</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setData</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>substringData</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendData</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>insertData</name>
                <desc>(ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>deleteData</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceData</name>
                <desc>(IILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.Node</name>
        <fields>
            <field>
                <name>ELEMENT_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ATTRIBUTE_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TEXT_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CDATA_SECTION_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENTITY_REFERENCE_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENTITY_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PROCESSING_INSTRUCTION_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMMENT_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_TYPE_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_FRAGMENT_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NOTATION_NODE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_POSITION_DISCONNECTED</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_POSITION_PRECEDING</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_POSITION_FOLLOWING</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_POSITION_CONTAINS</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_POSITION_CONTAINED_BY</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getNodeName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setNodeValue</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNodeType</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChildNodes</name>
                <desc>()Lorg/w3c/dom/NodeList;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>insertBefore</name>
                <desc>(Lorg/w3c/dom/Node;Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceChild</name>
                <desc>(Lorg/w3c/dom/Node;Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeChild</name>
                <desc>(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendChild</name>
                <desc>(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasChildNodes</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>cloneNode</name>
                <desc>(Z)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSupported</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasAttributes</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareDocumentPosition</name>
                <desc>(Lorg/w3c/dom/Node;)S</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTextContent</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isSameNode</name>
                <desc>(Lorg/w3c/dom/Node;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDefaultNamespace</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEqualNode</name>
                <desc>(Lorg/w3c/dom/Node;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFeature</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setUserData</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;Lorg/w3c/dom/UserDataHandler;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getUserData</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.Attr</name>
        <fields></fields>
        <methods>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSpecified</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getValue</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setValue</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSchemaTypeInfo</name>
                <desc>()Lorg/w3c/dom/TypeInfo;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isId</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.ls.LSResourceResolver</name>
        <fields></fields>
        <methods>
            <method>
                <name>resolveResource</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/ls/LSInput;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.ls.LSInput</name>
        <fields></fields>
        <methods>
            <method>
                <name>getCertifiedText</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setCertifiedText</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.NodeList</name>
        <fields></fields>
        <methods>
            <method>
                <name>item</name>
                <desc>(I)Lorg/w3c/dom/Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>org.w3c.dom.Element</name>
        <fields></fields>
        <methods>
            <method>
                <name>getTagName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAttribute</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setAttribute</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeAttribute</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAttributeNode</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAttributeNode</name>
                <desc>(Lorg/w3c/dom/Attr;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeAttributeNode</name>
                <desc>(Lorg/w3c/dom/Attr;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getElementsByTagName</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/NodeList;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAttributeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setAttributeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeAttributeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAttributeNodeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAttributeNodeNS</name>
                <desc>(Lorg/w3c/dom/Attr;)Lorg/w3c/dom/Attr;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getElementsByTagNameNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/NodeList;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasAttribute</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasAttributeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Z</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSchemaTypeInfo</name>
                <desc>()Lorg/w3c/dom/TypeInfo;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setIdAttribute</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setIdAttributeNS</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Z)V</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setIdAttributeNode</name>
                <desc>(Lorg/w3c/dom/Attr;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>sun.nio.ch.FileChannelImpl$Unmapper</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.FileChannelImpl</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.FileChannelImpl$SimpleFileLockTable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.Util$BufferCache</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.NativeDispatcher</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.Util</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.FileDispatcher</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.nio.ch.IOUtil</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.misc.SharedSecrets</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.misc.FormattedFloatingDecimal$Form</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.misc.FloatingDecimal</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.misc.JavaLangAccess</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>sun.misc.FormattedFloatingDecimal</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>javax.net.ssl.SSLContext</name>
        <fields>
            <field>
                <name>provider</name>
                <desc>Ljava/security/Provider;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>contextSpi</name>
                <desc>Ljavax/net/ssl/SSLContextSpi;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>protocol</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>defaultContext</name>
                <desc>Ljavax/net/ssl/SSLContext;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljavax/net/ssl/SSLContextSpi;Ljava/security/Provider;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDefault</name>
                <desc>()Ljavax/net/ssl/SSLContext;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setDefault</name>
                <desc>(Ljavax/net/ssl/SSLContext;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljavax/net/ssl/SSLContext;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProtocol</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProvider</name>
                <desc>()Ljava/security/Provider;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSocketFactory</name>
                <desc>()Ljavax/net/ssl/SSLSocketFactory;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getServerSocketFactory</name>
                <desc>()Ljavax/net/ssl/SSLServerSocketFactory;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>createSSLEngine</name>
                <desc>()Ljavax/net/ssl/SSLEngine;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>createSSLEngine</name>
                <desc>(Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefaultSSLParameters</name>
                <desc>()Ljavax/net/ssl/SSLParameters;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSupportedSSLParameters</name>
                <desc>()Ljavax/net/ssl/SSLParameters;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.net.ssl.X509ExtendedKeyManager</name>
        <fields></fields>
        <methods>
            <method>
                <name>chooseEngineClientAlias</name>
                <desc>
                    ([Ljava/lang/String;[Ljava/security/Principal;Ljavax/net/ssl/SSLEngine;)Ljava/lang/String;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>chooseEngineServerAlias</name>
                <desc>
                    (Ljava/lang/String;[Ljava/security/Principal;Ljavax/net/ssl/SSLEngine;)Ljava/lang/String;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.net.ssl.TrustManagerFactory</name>
        <fields></fields>
        <methods>
            <method>
                <name>getDefaultAlgorithm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljavax/net/ssl/TrustManagerFactorySpi;Ljava/security/Provider;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAlgorithm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/TrustManagerFactory;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProvider</name>
                <desc>()Ljava/security/Provider;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>init</name>
                <desc>(Ljavax/net/ssl/ManagerFactoryParameters;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTrustManagers</name>
                <desc>()[Ljavax/net/ssl/TrustManager;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.net.ssl.X509KeyManager</name>
        <fields></fields>
        <methods>
            <method>
                <name>getClientAliases</name>
                <desc>(Ljava/lang/String;[Ljava/security/Principal;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>chooseClientAlias</name>
                <desc>([Ljava/lang/String;[Ljava/security/Principal;Ljava/net/Socket;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getServerAliases</name>
                <desc>(Ljava/lang/String;[Ljava/security/Principal;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>chooseServerAlias</name>
                <desc>(Ljava/lang/String;[Ljava/security/Principal;Ljava/net/Socket;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCertificateChain</name>
                <desc>(Ljava/lang/String;)[Ljava/security/cert/X509Certificate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPrivateKey</name>
                <desc>(Ljava/lang/String;)Ljava/security/PrivateKey;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.xpath.XPathVariableResolver</name>
        <fields></fields>
        <methods>
            <method>
                <name>resolveVariable</name>
                <desc>(Ljavax/xml/namespace/QName;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.transform.URIResolver</name>
        <fields></fields>
        <methods>
            <method>
                <name>resolve</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljavax/xml/transform/Source;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.FactoryConfigurationError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Exception;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Exception;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.DocumentBuilderFactory</name>
        <fields></fields>
        <methods>
            <method>
                <name>newInstance</name>
                <desc>()Ljavax/xml/parsers/DocumentBuilderFactory;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/parsers/DocumentBuilderFactory;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newDocumentBuilder</name>
                <desc>()Ljavax/xml/parsers/DocumentBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setNamespaceAware</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setValidating</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setIgnoringElementContentWhitespace</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setExpandEntityReferences</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setIgnoringComments</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setCoalescing</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isNamespaceAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValidating</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isIgnoringElementContentWhitespace</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isExpandEntityReferences</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isIgnoringComments</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isCoalescing</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setAttribute</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAttribute</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setFeature</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFeature</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setXIncludeAware</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isXIncludeAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.FactoryFinder</name>
        <fields>
            <field>
                <name>DEFAULT_PACKAGE</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>debug</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cacheProps</name>
                <desc>Ljava/util/Properties;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>firstTime</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ss</name>
                <desc>Ljavax/xml/parsers/SecuritySupport;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>dPrint</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProviderClass</name>
                <desc>(Ljava/lang/String;Ljava/lang/ClassLoader;ZZ)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/ClassLoader;ZZ)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findServiceProvider</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.SAXParser</name>
        <fields></fields>
        <methods>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/InputStream;Lorg/xml/sax/HandlerBase;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/InputStream;Lorg/xml/sax/HandlerBase;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/InputStream;Lorg/xml/sax/helpers/DefaultHandler;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/InputStream;Lorg/xml/sax/helpers/DefaultHandler;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;Lorg/xml/sax/HandlerBase;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;Lorg/xml/sax/helpers/DefaultHandler;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/File;Lorg/xml/sax/HandlerBase;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/File;Lorg/xml/sax/helpers/DefaultHandler;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Lorg/xml/sax/InputSource;Lorg/xml/sax/HandlerBase;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Lorg/xml/sax/InputSource;Lorg/xml/sax/helpers/DefaultHandler;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getParser</name>
                <desc>()Lorg/xml/sax/Parser;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getXMLReader</name>
                <desc>()Lorg/xml/sax/XMLReader;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isNamespaceAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValidating</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setProperty</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProperty</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isXIncludeAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.ParserConfigurationException</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.SecuritySupport</name>
        <fields></fields>
        <methods>
            <method>
                <name>getContextClassLoader</name>
                <desc>()Ljava/lang/ClassLoader;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSystemProperty</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFileInputStream</name>
                <desc>(Ljava/io/File;)Ljava/io/FileInputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getResourceAsStream</name>
                <desc>(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>doesFileExist</name>
                <desc>(Ljava/io/File;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.DocumentBuilder</name>
        <fields></fields>
        <methods>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/InputStream;)Lorg/w3c/dom/Document;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/InputStream;Ljava/lang/String;)Lorg/w3c/dom/Document;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;)Lorg/w3c/dom/Document;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/io/File;)Lorg/w3c/dom/Document;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Lorg/xml/sax/InputSource;)Lorg/w3c/dom/Document;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isNamespaceAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValidating</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newDocument</name>
                <desc>()Lorg/w3c/dom/Document;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDOMImplementation</name>
                <desc>()Lorg/w3c/dom/DOMImplementation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isXIncludeAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.parsers.SAXParserFactory</name>
        <fields></fields>
        <methods>
            <method>
                <name>newInstance</name>
                <desc>()Ljavax/xml/parsers/SAXParserFactory;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljavax/xml/parsers/SAXParserFactory;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newSAXParser</name>
                <desc>()Ljavax/xml/parsers/SAXParser;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setNamespaceAware</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setValidating</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isNamespaceAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValidating</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setFeature</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFeature</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setXIncludeAware</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isXIncludeAware</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.stream.XMLStreamException</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljavax/xml/stream/Location;Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljavax/xml/stream/Location;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.stream.XMLResolver</name>
        <fields></fields>
        <methods>
            <method>
                <name>resolveEntity</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.xml.namespace.NamespaceContext</name>
        <fields></fields>
        <methods>
            <method>
                <name>getNamespaceURI</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPrefix</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPrefixes</name>
                <desc>(Ljava/lang/String;)Ljava/util/Iterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.management.NotificationBroadcaster</name>
        <fields></fields>
        <methods>
            <method>
                <name>addNotificationListener</name>
                <desc>
                    (Ljavax/management/NotificationListener;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNotificationListener</name>
                <desc>(Ljavax/management/NotificationListener;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNotificationInfo</name>
                <desc>()[Ljavax/management/MBeanNotificationInfo;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.management.openmbean.CompositeType</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>myHashCode</name>
                <desc>Ljava/lang/Integer;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>myToString</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>myNamesSet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljavax/management/openmbean/OpenType;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkForNullElement</name>
                <desc>([Ljava/lang/Object;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkForEmptyString</name>
                <desc>([Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAssignableFrom</name>
                <desc>(Ljavax/management/openmbean/OpenType;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.management.MBeanServer</name>
        <fields></fields>
        <methods>
            <method>
                <name>createMBean</name>
                <desc>(Ljava/lang/String;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createMBean</name>
                <desc>
                    (Ljava/lang/String;Ljavax/management/ObjectName;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;
                </desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createMBean</name>
                <desc>
                    (Ljava/lang/String;Ljavax/management/ObjectName;[Ljava/lang/Object;[Ljava/lang/String;)Ljavax/management/ObjectInstance;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createMBean</name>
                <desc>
                    (Ljava/lang/String;Ljavax/management/ObjectName;Ljavax/management/ObjectName;[Ljava/lang/Object;[Ljava/lang/String;)Ljavax/management/ObjectInstance;
                </desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>registerMBean</name>
                <desc>(Ljava/lang/Object;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getObjectInstance</name>
                <desc>(Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>queryMBeans</name>
                <desc>(Ljavax/management/ObjectName;Ljavax/management/QueryExp;)Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>queryNames</name>
                <desc>(Ljavax/management/ObjectName;Ljavax/management/QueryExp;)Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isRegistered</name>
                <desc>(Ljavax/management/ObjectName;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMBeanCount</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAttribute</name>
                <desc>(Ljavax/management/ObjectName;Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAttributes</name>
                <desc>(Ljavax/management/ObjectName;[Ljava/lang/String;)Ljavax/management/AttributeList;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setAttribute</name>
                <desc>(Ljavax/management/ObjectName;Ljavax/management/Attribute;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAttributes</name>
                <desc>
                    (Ljavax/management/ObjectName;Ljavax/management/AttributeList;)Ljavax/management/AttributeList;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>invoke</name>
                <desc>
                    (Ljavax/management/ObjectName;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefaultDomain</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDomains</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addNotificationListener</name>
                <desc>
                    (Ljavax/management/ObjectName;Ljavax/management/NotificationListener;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addNotificationListener</name>
                <desc>
                    (Ljavax/management/ObjectName;Ljavax/management/ObjectName;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNotificationListener</name>
                <desc>(Ljavax/management/ObjectName;Ljavax/management/ObjectName;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNotificationListener</name>
                <desc>
                    (Ljavax/management/ObjectName;Ljavax/management/ObjectName;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNotificationListener</name>
                <desc>
                    (Ljavax/management/ObjectName;Ljavax/management/NotificationListener;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMBeanInfo</name>
                <desc>(Ljavax/management/ObjectName;)Ljavax/management/MBeanInfo;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInstanceOf</name>
                <desc>(Ljavax/management/ObjectName;Ljava/lang/String;)Z</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>instantiate</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>instantiate</name>
                <desc>(Ljava/lang/String;Ljavax/management/ObjectName;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>instantiate</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>instantiate</name>
                <desc>
                    (Ljava/lang/String;Ljavax/management/ObjectName;[Ljava/lang/Object;[Ljava/lang/String;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deserialize</name>
                <desc>(Ljavax/management/ObjectName;[B)Ljava/io/ObjectInputStream;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deserialize</name>
                <desc>(Ljava/lang/String;[B)Ljava/io/ObjectInputStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deserialize</name>
                <desc>(Ljava/lang/String;Ljavax/management/ObjectName;[B)Ljava/io/ObjectInputStream;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassLoaderFor</name>
                <desc>(Ljavax/management/ObjectName;)Ljava/lang/ClassLoader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassLoader</name>
                <desc>(Ljavax/management/ObjectName;)Ljava/lang/ClassLoader;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassLoaderRepository</name>
                <desc>()Ljavax/management/loading/ClassLoaderRepository;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.naming.directory.Attributes</name>
        <fields></fields>
        <methods>
            <method>
                <name>isCaseIgnored</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;)Ljavax/naming/directory/Attribute;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAll</name>
                <desc>()Ljavax/naming/NamingEnumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getIDs</name>
                <desc>()Ljavax/naming/NamingEnumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)Ljavax/naming/directory/Attribute;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljavax/naming/directory/Attribute;)Ljavax/naming/directory/Attribute;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/String;)Ljavax/naming/directory/Attribute;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.naming.ldap.InitialLdapContext</name>
        <fields>
            <field>
                <name>BIND_CONTROLS_PROPERTY</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>extendedOperation</name>
                <desc>(Ljavax/naming/ldap/ExtendedRequest;)Ljavax/naming/ldap/ExtendedResponse;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>([Ljavax/naming/ldap/Control;)Ljavax/naming/ldap/LdapContext;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>javax.swing.table.DefaultTableCellRenderer</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>javax.swing.table.TableCellRenderer</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>javax.swing.table.AbstractTableModel</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>javax.swing.table.DefaultTableCellRenderer$UIResource</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>javax.swing.table.TableModel</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.net.URLClassLoader</name>
        <fields>
            <field>
                <name>ucp</name>
                <desc>Lsun/misc/URLClassPath;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>acc</name>
                <desc>Ljava/security/AccessControlContext;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;Ljava/lang/ClassLoader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;Ljava/lang/ClassLoader;Ljava/security/AccessControlContext;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;Ljava/security/AccessControlContext;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;Ljava/lang/ClassLoader;Ljava/net/URLStreamHandlerFactory;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getResourceAsStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getURLs</name>
                <desc>()[Ljava/net/URL;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>definePackage</name>
                <desc>(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findResource</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findResources</name>
                <desc>(Ljava/lang/String;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPermissions</name>
                <desc>(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>([Ljava/net/URL;Ljava/lang/ClassLoader;)Ljava/net/URLClassLoader;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>([Ljava/net/URL;)Ljava/net/URLClassLoader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.URLStreamHandlerFactory</name>
        <fields></fields>
        <methods>
            <method>
                <name>createURLStreamHandler</name>
                <desc>(Ljava/lang/String;)Ljava/net/URLStreamHandler;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.URL</name>
        <fields>
            <field>
                <name>BUILTIN_HANDLERS_PREFIX</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>protocolPathProp</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>query</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>path</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>userInfo</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>handler</name>
                <desc>Ljava/net/URLStreamHandler;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tempState</name>
                <desc>Ljava/net/UrlDeserializedState;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>factory</name>
                <desc>Ljava/net/URLStreamHandlerFactory;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>handlers</name>
                <desc>Ljava/util/Hashtable;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>streamHandlerLock</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialPersistentFields</name>
                <desc>[Ljava/io/ObjectStreamField;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/URL;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getQuery</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPath</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUserInfo</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAuthority</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefaultPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProtocol</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getHost</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFile</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRef</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sameFile</name>
                <desc>(Ljava/net/URL;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toExternalForm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toURI</name>
                <desc>()Ljava/net/URI;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>openConnection</name>
                <desc>()Ljava/net/URLConnection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>openConnection</name>
                <desc>(Ljava/net/Proxy;)Ljava/net/URLConnection;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>openStream</name>
                <desc>()Ljava/io/InputStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getContent</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getContent</name>
                <desc>([Ljava/lang/Class;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setURLStreamHandlerFactory</name>
                <desc>(Ljava/net/URLStreamHandlerFactory;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getURLStreamHandler</name>
                <desc>(Ljava/lang/String;)Ljava/net/URLStreamHandler;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>writeObject</name>
                <desc>(Ljava/io/ObjectOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readObject</name>
                <desc>(Ljava/io/ObjectInputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.UrlDeserializedState</name>
        <fields>
            <field>
                <name>protocol</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>host</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>port</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>hashCode</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProtocol</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getHost</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAuthority</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFile</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRef</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getHashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reconstituteUrlString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.Parts</name>
        <fields>
            <field>
                <name>path</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>query</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPath</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getQuery</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.HttpConnectSocketImpl</name>
        <fields>
            <field>
                <name>server</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/Proxy;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/net/SocketAddress;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setOption</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getInetAddress</name>
                <desc>()Ljava/net/InetAddress;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLocalPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.FactoryURLClassLoader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;Ljava/lang/ClassLoader;Ljava/security/AccessControlContext;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/net/URL;Ljava/security/AccessControlContext;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>loadClass</name>
                <desc>(Ljava/lang/String;Z)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.net.Socket</name>
        <fields>
            <field>
                <name>impl</name>
                <desc>Ljava/net/SocketImpl;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>factory</name>
                <desc>Ljava/net/SocketImplFactory;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/Proxy;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/SocketImpl;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/InetAddress;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;ILjava/net/InetAddress;I)V</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;IZ)V</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/InetAddress;IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>createImpl</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getImpl</name>
                <desc>()Ljava/net/SocketImpl;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/net/SocketAddress;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/net/SocketAddress;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLocalAddress</name>
                <desc>()Ljava/net/InetAddress;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLocalPort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInputStream</name>
                <desc>()Ljava/io/InputStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOutputStream</name>
                <desc>()Ljava/io/OutputStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTcpNoDelay</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTcpNoDelay</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSoLinger</name>
                <desc>(ZI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSoLinger</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sendUrgentData</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setOOBInline</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getOOBInline</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSoTimeout</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSoTimeout</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSendBufferSize</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSendBufferSize</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setReceiveBufferSize</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getReceiveBufferSize</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setKeepAlive</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getKeepAlive</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTrafficClass</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTrafficClass</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setReuseAddress</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getReuseAddress</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isConnected</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isBound</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isClosed</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInputShutdown</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isOutputShutdown</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setPerformancePreferences</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.beans.MethodRef</name>
        <fields></fields>
        <methods>
            <method>
                <name>isSet</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Method;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.beans.FeatureDescriptor</name>
        <fields>
            <field>
                <name>TRANSIENT</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setName</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setDisplayName</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isExpert</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setExpert</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isHidden</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setHidden</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isPreferred</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setPreferred</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getShortDescription</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setShortDescription</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setValue</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getValue</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>attributeNames</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/beans/FeatureDescriptor;Ljava/beans/FeatureDescriptor;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/beans/FeatureDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isTransient</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setClass0</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getReturnType</name>
                <desc>(Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/Class;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getParameterTypes</name>
                <desc>(Ljava/lang/Class;Ljava/lang/reflect/Method;)[Ljava/lang/Class;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendTo</name>
                <desc>(Ljava/lang/StringBuilder;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>appendTo</name>
                <desc>(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/ref/Reference;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>appendTo</name>
                <desc>(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>appendTo</name>
                <desc>(Ljava/lang/StringBuilder;Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.beans.PropertyDescriptor</name>
        <fields>
            <field>
                <name>readMethodRef</name>
                <desc>Ljava/beans/MethodRef;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>writeMethodRef</name>
                <desc>Ljava/beans/MethodRef;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setClass0</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isBound</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setBound</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isConstrained</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setConstrained</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareMethods</name>
                <desc>(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/beans/PropertyDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateGenericsFor</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBaseName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendTo</name>
                <desc>(Ljava/lang/StringBuilder;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ClassLoader</name>
        <fields>
            <field>
                <name>package2certs</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nocerts</name>
                <desc>[Ljava/security/cert/Certificate;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>classes</name>
                <desc>Ljava/util/Vector;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>defaultDomain</name>
                <desc>Ljava/security/ProtectionDomain;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>domains</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>packages</name>
                <desc>Ljava/util/HashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sclSet</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loadedLibraryNames</name>
                <desc>Ljava/util/Vector;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>systemNativeLibraries</name>
                <desc>Ljava/util/Vector;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nativeLibraryContext</name>
                <desc>Ljava/util/Stack;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>assertionLock</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>addClass</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>loadClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>loadClass</name>
                <desc>(Ljava/lang/String;Z)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassLoadingLock</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass</name>
                <desc>([BII)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass</name>
                <desc>(Ljava/lang/String;[BII)Ljava/lang/Class;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass</name>
                <desc>(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass</name>
                <desc>
                    (Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;
                </desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass0</name>
                <desc>(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass1</name>
                <desc>
                    (Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;
                </desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineClass2</name>
                <desc>
                    (Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;
                </desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>resolveClass</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>resolveClass0</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findSystemClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findBootstrapClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findLoadedClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findLoadedClass0</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSigners</name>
                <desc>(Ljava/lang/Class;[Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getResource</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getResources</name>
                <desc>(Ljava/lang/String;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findResource</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findResources</name>
                <desc>(Ljava/lang/String;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>registerAsParallelCapable</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSystemResource</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSystemResources</name>
                <desc>(Ljava/lang/String;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBootstrapResource</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBootstrapResources</name>
                <desc>(Ljava/lang/String;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBootstrapClassPath</name>
                <desc>()Lsun/misc/URLClassPath;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getResourceAsStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSystemResourceAsStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isAncestor</name>
                <desc>(Ljava/lang/ClassLoader;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>needsClassLoaderPermissionCheck</name>
                <desc>(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassLoader</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/ClassLoader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkClassLoaderPermission</name>
                <desc>(Ljava/lang/ClassLoader;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>definePackage</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPackage</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Package;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPackages</name>
                <desc>()[Ljava/lang/Package;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findLibrary</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>initializePath</name>
                <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>loadLibrary</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>loadLibrary0</name>
                <desc>(Ljava/lang/Class;Ljava/io/File;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findNative</name>
                <desc>(Ljava/lang/ClassLoader;Ljava/lang/String;)J</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setDefaultAssertionStatus</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setPackageAssertionStatus</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setClassAssertionStatus</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>desiredAssertionStatus</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retrieveDirectives</name>
                <desc>()Ljava/lang/AssertionStatusDirectives;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Enum</name>
        <fields>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ordinal</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>name</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ordinal</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Enum;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaringClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Class</name>
        <fields>
            <field>
                <name>ANNOTATION</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENUM</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SYNTHETIC</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cachedConstructor</name>
                <desc>Ljava/lang/reflect/Constructor;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>newInstanceCallerCache</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>allPermDomain</name>
                <desc>Ljava/security/ProtectionDomain;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>useCaches</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reflectionData</name>
                <desc>Ljava/lang/ref/SoftReference;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>classRedefinedCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>genericInfo</name>
                <desc>Lsun/reflect/generics/repository/ClassRepository;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialPersistentFields</name>
                <desc>[Ljava/io/ObjectStreamField;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reflectionFactory</name>
                <desc>Lsun/reflect/ReflectionFactory;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>initted</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>enumConstants</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>enumConstantDirectory</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>annotationData</name>
                <desc>Ljava/lang/Class$AnnotationData;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>annotationType</name>
                <desc>Lsun/reflect/annotation/AnnotationType;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>classValueMap</name>
                <desc>Ljava/lang/ClassValue$ClassValueMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toGenericString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forName</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forName</name>
                <desc>(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInstance</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAssignableFrom</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInterface</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isArray</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isPrimitive</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAnnotation</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSynthetic</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName0</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassLoader0</name>
                <desc>()Ljava/lang/ClassLoader;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTypeParameters</name>
                <desc>()[Ljava/lang/reflect/TypeVariable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInterfaces</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInterfaces0</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericInterfaces</name>
                <desc>()[Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getModifiers</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSigners</name>
                <desc>([Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEnclosingMethod0</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toClass</name>
                <desc>(Ljava/lang/reflect/Type;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaringClass0</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSimpleName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTypeName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAsciiDigit</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAnonymousClass</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLocalClass</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isMemberClass</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClasses</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFields</name>
                <desc>()[Ljava/lang/reflect/Field;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMethods</name>
                <desc>()[Ljava/lang/reflect/Method;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getConstructors</name>
                <desc>()[Ljava/lang/reflect/Constructor;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getField</name>
                <desc>(Ljava/lang/String;)Ljava/lang/reflect/Field;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMethod</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getConstructor</name>
                <desc>([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredClasses</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredFields</name>
                <desc>()[Ljava/lang/reflect/Field;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredMethods</name>
                <desc>()[Ljava/lang/reflect/Method;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredConstructors</name>
                <desc>()[Ljava/lang/reflect/Constructor;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredField</name>
                <desc>(Ljava/lang/String;)Ljava/lang/reflect/Field;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredMethod</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredConstructor</name>
                <desc>([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getResourceAsStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getResource</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProtectionDomain</name>
                <desc>()Ljava/security/ProtectionDomain;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProtectionDomain0</name>
                <desc>()Ljava/security/ProtectionDomain;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPrimitiveClass</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericSignature0</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawAnnotations</name>
                <desc>()[B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawTypeAnnotations</name>
                <desc>()[B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExecutableTypeAnnotationBytes</name>
                <desc>(Ljava/lang/reflect/Executable;)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getConstantPool</name>
                <desc>()Lsun/reflect/ConstantPool;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;[Ljava/lang/reflect/Field;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>searchFields</name>
                <desc>([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>searchMethods</name>
                <desc>
                    ([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>arrayContentsEq</name>
                <desc>([Ljava/lang/Object;[Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyFields</name>
                <desc>([Ljava/lang/reflect/Field;)[Ljava/lang/reflect/Field;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyMethods</name>
                <desc>([Ljava/lang/reflect/Method;)[Ljava/lang/reflect/Method;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyConstructors</name>
                <desc>([Ljava/lang/reflect/Constructor;)[Ljava/lang/reflect/Constructor;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredFields0</name>
                <desc>(Z)[Ljava/lang/reflect/Field;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredMethods0</name>
                <desc>(Z)[Ljava/lang/reflect/Method;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredConstructors0</name>
                <desc>(Z)[Ljava/lang/reflect/Constructor;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredClasses0</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>argumentTypesToString</name>
                <desc>([Ljava/lang/Class;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>desiredAssertionStatus</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>desiredAssertionStatus0</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEnum</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getReflectionFactory</name>
                <desc>()Lsun/reflect/ReflectionFactory;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEnumConstantsShared</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumConstantDirectory</name>
                <desc>()Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>asSubclass</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isAnnotationPresent</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotationsByType</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDeclaredAnnotationsByType</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>casAnnotationType</name>
                <desc>(Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotationType</name>
                <desc>()Lsun/reflect/annotation/AnnotationType;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotationMap</name>
                <desc>()Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotatedSuperclass</name>
                <desc>()Ljava/lang/reflect/AnnotatedType;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotatedInterfaces</name>
                <desc>()[Ljava/lang/reflect/AnnotatedType;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Iterable</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.AutoCloseable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ThreadDeath</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.VirtualMachineError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.IllegalThreadStateException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.NumberFormatException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>forInputString</name>
                <desc>(Ljava/lang/String;)Ljava/lang/NumberFormatException;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Exception</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Float</name>
        <fields>
            <field>
                <name>POSITIVE_INFINITY</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NEGATIVE_INFINITY</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NaN</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_NORMAL</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_VALUE</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_EXPONENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_EXPONENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>(F)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toHexString</name>
                <desc>(F)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Float;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(F)Ljava/lang/Float;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseFloat</name>
                <desc>(Ljava/lang/String;)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isNaN</name>
                <desc>(F)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInfinite</name>
                <desc>(F)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isFinite</name>
                <desc>(F)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isNaN</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInfinite</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatToIntBits</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatToRawIntBits</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>intBitsToFloat</name>
                <desc>(I)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Float;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(FF)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Character</name>
        <fields>
            <field>
                <name>MIN_RADIX</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_RADIX</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_VALUE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNASSIGNED</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UPPERCASE_LETTER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LOWERCASE_LETTER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TITLECASE_LETTER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_LETTER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OTHER_LETTER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NON_SPACING_MARK</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENCLOSING_MARK</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMBINING_SPACING_MARK</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DECIMAL_DIGIT_NUMBER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LETTER_NUMBER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OTHER_NUMBER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SPACE_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LINE_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PARAGRAPH_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONTROL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FORMAT</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PRIVATE_USE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SURROGATE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DASH_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>START_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>END_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONNECTOR_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OTHER_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MATH_SYMBOL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CURRENCY_SYMBOL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_SYMBOL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OTHER_SYMBOL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INITIAL_QUOTE_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FINAL_QUOTE_PUNCTUATION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ERROR</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_UNDEFINED</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_LEFT_TO_RIGHT</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_RIGHT_TO_LEFT</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_EUROPEAN_NUMBER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_ARABIC_NUMBER</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_COMMON_NUMBER_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_NONSPACING_MARK</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_BOUNDARY_NEUTRAL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_PARAGRAPH_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_SEGMENT_SEPARATOR</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_WHITESPACE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_OTHER_NEUTRALS</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DIRECTIONALITY_POP_DIRECTIONAL_FORMAT</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_HIGH_SURROGATE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_HIGH_SURROGATE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_LOW_SURROGATE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_LOW_SURROGATE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_SURROGATE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_SURROGATE</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_SUPPLEMENTARY_CODE_POINT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_CODE_POINT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_CODE_POINT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(C)Ljava/lang/Character;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>charValue</name>
                <desc>()C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(C)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(C)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValidCodePoint</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isBmpCodePoint</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSupplementaryCodePoint</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isHighSurrogate</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLowSurrogate</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSurrogate</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSurrogatePair</name>
                <desc>(CC)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>charCount</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toCodePoint</name>
                <desc>(CC)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>(Ljava/lang/CharSequence;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>([CI)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAtImpl</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>(Ljava/lang/CharSequence;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>([CI)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBeforeImpl</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>highSurrogate</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lowSurrogate</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toChars</name>
                <desc>(I[CI)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toChars</name>
                <desc>(I)[C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toSurrogates</name>
                <desc>(I[CI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>codePointCount</name>
                <desc>(Ljava/lang/CharSequence;II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointCount</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointCountImpl</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offsetByCodePoints</name>
                <desc>(Ljava/lang/CharSequence;II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offsetByCodePoints</name>
                <desc>([CIIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offsetByCodePointsImpl</name>
                <desc>([CIIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLowerCase</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLowerCase</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUpperCase</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUpperCase</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isTitleCase</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isTitleCase</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDigit</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDigit</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDefined</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDefined</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLetter</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLetter</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLetterOrDigit</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLetterOrDigit</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isJavaLetter</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isJavaLetterOrDigit</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAlphabetic</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isIdeographic</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isJavaIdentifierStart</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isJavaIdentifierStart</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isJavaIdentifierPart</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isJavaIdentifierPart</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUnicodeIdentifierStart</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUnicodeIdentifierStart</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUnicodeIdentifierPart</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUnicodeIdentifierPart</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isIdentifierIgnorable</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isIdentifierIgnorable</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toLowerCase</name>
                <desc>(C)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toLowerCase</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUpperCase</name>
                <desc>(C)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUpperCase</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toTitleCase</name>
                <desc>(C)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toTitleCase</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>digit</name>
                <desc>(CI)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>digit</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNumericValue</name>
                <desc>(C)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNumericValue</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSpace</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSpaceChar</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSpaceChar</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isWhitespace</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isWhitespace</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isISOControl</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isISOControl</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getType</name>
                <desc>(C)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getType</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forDigit</name>
                <desc>(II)C</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDirectionality</name>
                <desc>(C)B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDirectionality</name>
                <desc>(I)B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isMirrored</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isMirrored</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Character;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(CC)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUpperCaseEx</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUpperCaseCharArray</name>
                <desc>(I)[C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseBytes</name>
                <desc>(C)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Double</name>
        <fields>
            <field>
                <name>POSITIVE_INFINITY</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NEGATIVE_INFINITY</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NaN</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_NORMAL</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_VALUE</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_EXPONENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_EXPONENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>(D)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toHexString</name>
                <desc>(D)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Double;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(D)Ljava/lang/Double;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseDouble</name>
                <desc>(Ljava/lang/String;)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isNaN</name>
                <desc>(D)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInfinite</name>
                <desc>(D)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isFinite</name>
                <desc>(D)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isNaN</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInfinite</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(D)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleToLongBits</name>
                <desc>(D)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleToRawLongBits</name>
                <desc>(D)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>longBitsToDouble</name>
                <desc>(J)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Double;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(DD)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Process</name>
        <fields></fields>
        <methods>
            <method>
                <name>getOutputStream</name>
                <desc>()Ljava/io/OutputStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInputStream</name>
                <desc>()Ljava/io/InputStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getErrorStream</name>
                <desc>()Ljava/io/InputStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>waitFor</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>exitValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Byte$ByteCache</name>
        <fields>
            <field>
                <name>cache</name>
                <desc>[Ljava/lang/Byte;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Error</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Package</name>
        <fields>
            <field>
                <name>pkgs</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>urls</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>mans</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>pkgName</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>specTitle</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>specVersion</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>specVendor</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>implTitle</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>implVersion</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>implVendor</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sealBase</name>
                <desc>Ljava/net/URL;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loader</name>
                <desc>Ljava/lang/ClassLoader;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>packageInfo</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSealed</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSealed</name>
                <desc>(Ljava/net/URL;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isCompatibleWith</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPackage</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Package;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPackages</name>
                <desc>()[Ljava/lang/Package;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPackage</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/Package;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isAnnotationPresent</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotationsByType</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDeclaredAnnotationsByType</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;Ljava/lang/ClassLoader;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSystemPackage</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Package;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSystemPackages</name>
                <desc>()[Ljava/lang/Package;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>defineSystemPackage</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Package;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>loadManifest</name>
                <desc>(Ljava/lang/String;)Ljava/util/jar/Manifest;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSystemPackage0</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSystemPackages0</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Boolean</name>
        <fields>
            <field>
                <name>TRUE</name>
                <desc>Ljava/lang/Boolean;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FALSE</name>
                <desc>Ljava/lang/Boolean;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parseBoolean</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>booleanValue</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Z)Ljava/lang/Boolean;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Boolean;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(Z)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(Z)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBoolean</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Boolean;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(ZZ)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>logicalAnd</name>
                <desc>(ZZ)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>logicalOr</name>
                <desc>(ZZ)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>logicalXor</name>
                <desc>(ZZ)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.IllegalAccessException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.CloneNotSupportedException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.CharSequence</name>
        <fields></fields>
        <methods>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>charAt</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSequence</name>
                <desc>(II)Ljava/lang/CharSequence;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ClassLoader$NativeLibrary</name>
        <fields>
            <field>
                <name>handle</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fromClass</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>isBuiltin</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loaded</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>load</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(Ljava/lang/String;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unload</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFromClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.NoSuchMethodException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.UnsupportedClassVersionError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.EnumConstantNotPresentException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Class;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>enumType</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>constantName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.StackOverflowError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ClassCastException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.StringBuffer</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/CharSequence;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>capacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ensureCapacity</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setLength</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>charAt</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointCount</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offsetByCodePoints</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>(II[CI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setCharAt</name>
                <desc>(IC)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/StringBuffer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/String;)Ljava/lang/StringBuffer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([C)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([CII)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Z)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(I)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendCodePoint</name>
                <desc>(I)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(J)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(F)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(D)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>delete</name>
                <desc>(II)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deleteCharAt</name>
                <desc>(I)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(IILjava/lang/String;)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSequence</name>
                <desc>(II)Ljava/lang/CharSequence;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[CII)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/String;)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[C)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;II)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IZ)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IC)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(II)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IJ)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IF)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ID)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>()Ljava/lang/StringBuffer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>()Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ID)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IF)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IJ)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IC)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IZ)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[CII)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deleteCharAt</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendCodePoint</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>delete</name>
                <desc>(II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(D)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(F)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(J)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Z)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([CII)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.InterruptedException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.TypeNotPresentException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>typeName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.AssertionError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Class$MethodArray</name>
        <fields></fields>
        <methods>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/reflect/Method;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>([Ljava/lang/reflect/Method;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/lang/Class$MethodArray;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addIfNotPresent</name>
                <desc>(Ljava/lang/reflect/Method;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAllIfNotPresent</name>
                <desc>(Ljava/lang/Class$MethodArray;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/reflect/Method;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getArray</name>
                <desc>()[Ljava/lang/reflect/Method;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Readable</name>
        <fields></fields>
        <methods>
            <method>
                <name>read</name>
                <desc>(Ljava/nio/CharBuffer;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Thread$State</name>
        <fields>
            <field>
                <name>NEW</name>
                <desc>Ljava/lang/Thread$State;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RUNNABLE</name>
                <desc>Ljava/lang/Thread$State;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BLOCKED</name>
                <desc>Ljava/lang/Thread$State;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WAITING</name>
                <desc>Ljava/lang/Thread$State;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TIMED_WAITING</name>
                <desc>Ljava/lang/Thread$State;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TERMINATED</name>
                <desc>Ljava/lang/Thread$State;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Class$AnnotationData</name>
        <fields>
            <field>
                <name>annotations</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>declaredAnnotations</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>redefinedCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;Ljava/util/Map;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Thread$UncaughtExceptionHandler</name>
        <fields></fields>
        <methods>
            <method>
                <name>uncaughtException</name>
                <desc>(Ljava/lang/Thread;Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.String$CaseInsensitiveComparator</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.StringCoding$StringDecoder</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ThreadGroup</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMaxPriority</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDaemon</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDestroyed</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setDaemon</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setMaxPriority</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parentOf</name>
                <desc>(Ljava/lang/ThreadGroup;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>activeCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumerate</name>
                <desc>([Ljava/lang/Thread;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumerate</name>
                <desc>([Ljava/lang/Thread;Z)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>activeGroupCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumerate</name>
                <desc>([Ljava/lang/ThreadGroup;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumerate</name>
                <desc>([Ljava/lang/ThreadGroup;Z)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>uncaughtException</name>
                <desc>(Ljava/lang/Thread;Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>allowThreadSuspension</name>
                <desc>(Z)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Long$LongCache</name>
        <fields>
            <field>
                <name>cache</name>
                <desc>[Ljava/lang/Long;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.IncompatibleClassChangeError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.CharacterData</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Thread</name>
        <fields>
            <field>
                <name>MIN_PRIORITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NORM_PRIORITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_PRIORITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>currentThread</name>
                <desc>()Ljava/lang/Thread;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sleep</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sleep</name>
                <desc>(JI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Runnable;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>stop</name>
                <desc>(Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>interrupted</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isInterrupted</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAlive</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setPriority</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPriority</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setName</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>activeCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumerate</name>
                <desc>([Ljava/lang/Thread;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>countStackFrames</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>join</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>join</name>
                <desc>(JI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDaemon</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isDaemon</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>holdsLock</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getStackTrace</name>
                <desc>()[Ljava/lang/StackTraceElement;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAllStackTraces</name>
                <desc>()Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getId</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getState</name>
                <desc>()Ljava/lang/Thread$State;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.instrument.ClassFileTransformer</name>
        <fields></fields>
        <methods>
            <method>
                <name>transform</name>
                <desc>
                    (Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Class;Ljava/security/ProtectionDomain;[B)[B
                </desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.instrument.Instrumentation</name>
        <fields></fields>
        <methods>
            <method>
                <name>addTransformer</name>
                <desc>(Ljava/lang/instrument/ClassFileTransformer;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addTransformer</name>
                <desc>(Ljava/lang/instrument/ClassFileTransformer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeTransformer</name>
                <desc>(Ljava/lang/instrument/ClassFileTransformer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isRetransformClassesSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>retransformClasses</name>
                <desc>([Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isRedefineClassesSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>redefineClasses</name>
                <desc>([Ljava/lang/instrument/ClassDefinition;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isModifiableClass</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAllLoadedClasses</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInitiatedClasses</name>
                <desc>(Ljava/lang/ClassLoader;)[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getObjectSize</name>
                <desc>(Ljava/lang/Object;)J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendToBootstrapClassLoaderSearch</name>
                <desc>(Ljava/util/jar/JarFile;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>appendToSystemClassLoaderSearch</name>
                <desc>(Ljava/util/jar/JarFile;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isNativeMethodPrefixSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setNativeMethodPrefix</name>
                <desc>(Ljava/lang/instrument/ClassFileTransformer;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Throwable$SentinelHolder</name>
        <fields>
            <field>
                <name>STACK_TRACE_ELEMENT_SENTINEL</name>
                <desc>Ljava/lang/StackTraceElement;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>STACK_TRACE_SENTINEL</name>
                <desc>[Ljava/lang/StackTraceElement;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Comparable</name>
        <fields></fields>
        <methods>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.SecurityException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Override</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.IllegalAccessError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ClassCircularityError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Runtime</name>
        <fields></fields>
        <methods>
            <method>
                <name>getRuntime</name>
                <desc>()Ljava/lang/Runtime;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>exit</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addShutdownHook</name>
                <desc>(Ljava/lang/Thread;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeShutdownHook</name>
                <desc>(Ljava/lang/Thread;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>halt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>runFinalizersOnExit</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>exec</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Process;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exec</name>
                <desc>(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exec</name>
                <desc>(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exec</name>
                <desc>([Ljava/lang/String;)Ljava/lang/Process;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exec</name>
                <desc>([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exec</name>
                <desc>([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>availableProcessors</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>freeMemory</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>totalMemory</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>maxMemory</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>traceInstructions</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>traceMethodCalls</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>load</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>loadLibrary</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLocalizedInputStream</name>
                <desc>(Ljava/io/InputStream;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLocalizedOutputStream</name>
                <desc>(Ljava/io/OutputStream;)Ljava/io/OutputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.ReferenceQueue$Lock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ref.Finalizer</name>
        <fields>
            <field>
                <name>queue</name>
                <desc>Ljava/lang/ref/ReferenceQueue;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>unfinalized</name>
                <desc>Ljava/lang/ref/Finalizer;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lock</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>register</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forkSecondaryFinalizer</name>
                <desc>(Ljava/lang/Runnable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.ReferenceQueue$Null</name>
        <fields></fields>
        <methods>
            <method>
                <name>enqueue</name>
                <desc>(Ljava/lang/ref/Reference;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.FinalReference</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.WeakReference</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.Finalizer$FinalizerThread</name>
        <fields>
            <field>
                <name>running</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/ThreadGroup;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.ReferenceQueue</name>
        <fields>
            <field>
                <name>NULL</name>
                <desc>Ljava/lang/ref/ReferenceQueue;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENQUEUED</name>
                <desc>Ljava/lang/ref/ReferenceQueue;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>head</name>
                <desc>Ljava/lang/ref/Reference;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>enqueue</name>
                <desc>(Ljava/lang/ref/Reference;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>poll</name>
                <desc>()Ljava/lang/ref/Reference;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(J)Ljava/lang/ref/Reference;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>()Ljava/lang/ref/Reference;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.Reference$Lock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ref.PhantomReference</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.SoftReference</name>
        <fields>
            <field>
                <name>clock</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.Reference</name>
        <fields>
            <field>
                <name>queue</name>
                <desc>Ljava/lang/ref/ReferenceQueue;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/lang/ref/Reference;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>discovered</name>
                <desc>Ljava/lang/ref/Reference;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lock</name>
                <desc>Ljava/lang/ref/Reference$Lock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>pending</name>
                <desc>Ljava/lang/ref/Reference;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>isEnqueued</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>enqueue</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ref.Reference$ReferenceHandler</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.InternalError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Long</name>
        <fields>
            <field>
                <name>MIN_VALUE</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>(JI)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedString</name>
                <desc>(JI)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedBigInteger</name>
                <desc>(J)Ljava/math/BigInteger;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toHexString</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toOctalString</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toBinaryString</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedString0</name>
                <desc>(JI)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>formatUnsignedLong</name>
                <desc>(JI[CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedString</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>(JI[C)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>stringSize</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseLong</name>
                <desc>(Ljava/lang/String;I)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseLong</name>
                <desc>(Ljava/lang/String;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseUnsignedLong</name>
                <desc>(Ljava/lang/String;I)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseUnsignedLong</name>
                <desc>(Ljava/lang/String;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;I)Ljava/lang/Long;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Long;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(J)Ljava/lang/Long;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>decode</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Long;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLong</name>
                <desc>(Ljava/lang/String;J)Ljava/lang/Long;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Long;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(JJ)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareUnsigned</name>
                <desc>(JJ)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>divideUnsigned</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remainderUnsigned</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>highestOneBit</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lowestOneBit</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>numberOfLeadingZeros</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>numberOfTrailingZeros</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>bitCount</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateLeft</name>
                <desc>(JI)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateRight</name>
                <desc>(JI)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>signum</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseBytes</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.IllegalMonitorStateException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.IllegalStateException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Integer</name>
        <fields>
            <field>
                <name>MIN_VALUE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>digits</name>
                <desc>[C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DigitTens</name>
                <desc>[C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DigitOnes</name>
                <desc>[C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sizeTable</name>
                <desc>[I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedString</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toHexString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toOctalString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toBinaryString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedString0</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>formatUnsignedInt</name>
                <desc>(II[CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>(II[C)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>stringSize</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseInt</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseInt</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseUnsignedInt</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseUnsignedInt</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;I)Ljava/lang/Integer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Integer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(I)Ljava/lang/Integer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInteger</name>
                <desc>(Ljava/lang/String;I)Ljava/lang/Integer;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>decode</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Integer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Integer;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareUnsigned</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedLong</name>
                <desc>(I)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>divideUnsigned</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remainderUnsigned</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>highestOneBit</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lowestOneBit</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>numberOfLeadingZeros</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>numberOfTrailingZeros</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>bitCount</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateLeft</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateRight</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>signum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseBytes</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.management.ThreadMXBean</name>
        <fields></fields>
        <methods>
            <method>
                <name>getThreadCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPeakThreadCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTotalStartedThreadCount</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDaemonThreadCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAllThreadIds</name>
                <desc>()[J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getThreadInfo</name>
                <desc>(J)Ljava/lang/management/ThreadInfo;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getThreadInfo</name>
                <desc>([J)[Ljava/lang/management/ThreadInfo;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getThreadInfo</name>
                <desc>(JI)Ljava/lang/management/ThreadInfo;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getThreadInfo</name>
                <desc>([JI)[Ljava/lang/management/ThreadInfo;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isThreadContentionMonitoringSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isThreadContentionMonitoringEnabled</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setThreadContentionMonitoringEnabled</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCurrentThreadCpuTime</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCurrentThreadUserTime</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getThreadCpuTime</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getThreadUserTime</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isThreadCpuTimeSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isCurrentThreadCpuTimeSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isThreadCpuTimeEnabled</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setThreadCpuTimeEnabled</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isObjectMonitorUsageSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSynchronizerUsageSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getThreadInfo</name>
                <desc>([JZZ)[Ljava/lang/management/ThreadInfo;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>dumpAllThreads</name>
                <desc>(ZZ)[Ljava/lang/management/ThreadInfo;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.StringIndexOutOfBoundsException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Void</name>
        <fields>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.NoSuchFieldException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Object</name>
        <fields></fields>
        <methods>
            <method>
                <name>getClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>wait</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>wait</name>
                <desc>(JI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Integer$IntegerCache</name>
        <fields>
            <field>
                <name>low</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>high</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cache</name>
                <desc>[Ljava/lang/Integer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.SuppressWarnings</name>
        <fields></fields>
        <methods>
            <method>
                <name>value</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.NegativeArraySizeException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Compiler</name>
        <fields></fields>
        <methods>
            <method>
                <name>compileClass</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compileClasses</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>command</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.reflect.InvocationTargetException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.reflect.Method</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;IILjava/lang/String;[B[B[B)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                    <param>9</param>
                    <param>10</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>copy</name>
                <desc>()Ljava/lang/reflect/Method;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaringClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getModifiers</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTypeParameters</name>
                <desc>()[Ljava/lang/reflect/TypeVariable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getReturnType</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericReturnType</name>
                <desc>()Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getParameterTypes</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericParameterTypes</name>
                <desc>()[Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExceptionTypes</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericExceptionTypes</name>
                <desc>()[Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toGenericString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>invoke</name>
                <desc>(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isBridge</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isVarArgs</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSynthetic</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDeclaredAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getParameterAnnotations</name>
                <desc>()[[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.reflect.Field</name>
        <fields></fields>
        <methods>
            <method>
                <name>getDeclaringClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getModifiers</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEnumConstant</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSynthetic</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getType</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericType</name>
                <desc>()Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toGenericString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBoolean</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getByte</name>
                <desc>(Ljava/lang/Object;)B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChar</name>
                <desc>(Ljava/lang/Object;)C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getShort</name>
                <desc>(Ljava/lang/Object;)S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInt</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLong</name>
                <desc>(Ljava/lang/Object;)J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFloat</name>
                <desc>(Ljava/lang/Object;)F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDouble</name>
                <desc>(Ljava/lang/Object;)D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setBoolean</name>
                <desc>(Ljava/lang/Object;Z)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setByte</name>
                <desc>(Ljava/lang/Object;B)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setChar</name>
                <desc>(Ljava/lang/Object;C)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setShort</name>
                <desc>(Ljava/lang/Object;S)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setInt</name>
                <desc>(Ljava/lang/Object;I)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setLong</name>
                <desc>(Ljava/lang/Object;J)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setFloat</name>
                <desc>(Ljava/lang/Object;F)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDouble</name>
                <desc>(Ljava/lang/Object;D)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDeclaredAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.reflect.AnnotatedElement</name>
        <fields></fields>
        <methods>
            <method>
                <name>isAnnotationPresent</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotationsByType</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDeclaredAnnotationsByType</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDeclaredAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.reflect.ParameterizedType</name>
        <fields></fields>
        <methods>
            <method>
                <name>getActualTypeArguments</name>
                <desc>()[Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawType</name>
                <desc>()Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOwnerType</name>
                <desc>()Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.reflect.Array</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.reflect.Constructor</name>
        <fields></fields>
        <methods>
            <method>
                <name>getDeclaringClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getModifiers</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTypeParameters</name>
                <desc>()[Ljava/lang/reflect/TypeVariable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getParameterTypes</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericParameterTypes</name>
                <desc>()[Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExceptionTypes</name>
                <desc>()[Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGenericExceptionTypes</name>
                <desc>()[Ljava/lang/reflect/Type;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toGenericString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newInstance</name>
                <desc>([Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isVarArgs</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isSynthetic</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnnotation</name>
                <desc>(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDeclaredAnnotations</name>
                <desc>()[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getParameterAnnotations</name>
                <desc>()[[Ljava/lang/annotation/Annotation;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.CharacterName</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.UnknownError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ClassLoader$ParallelLoaders</name>
        <fields>
            <field>
                <name>loaderTypes</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>register</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isRegistered</name>
                <desc>(Ljava/lang/Class;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Byte</name>
        <fields>
            <field>
                <name>MIN_VALUE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>(B)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(B)Ljava/lang/Byte;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseByte</name>
                <desc>(Ljava/lang/String;I)B</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseByte</name>
                <desc>(Ljava/lang/String;)B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;I)Ljava/lang/Byte;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Byte;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>decode</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Byte;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Byte;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(BB)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedInt</name>
                <desc>(B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedLong</name>
                <desc>(B)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.RuntimePermission</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.IllegalArgumentException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.NullPointerException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Throwable</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>backtrace</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNASSIGNED_STACK</name>
                <desc>[Ljava/lang/StackTraceElement;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPRESSED_SENTINEL</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NULL_CAUSE_MESSAGE</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SELF_SUPPRESSION_MESSAGE</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CAUSE_CAPTION</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPRESSED_CAPTION</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_THROWABLE_ARRAY</name>
                <desc>[Ljava/lang/Throwable;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>initCause</name>
                <desc>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>printStackTrace</name>
                <desc>(Ljava/io/PrintStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>printStackTrace</name>
                <desc>(Ljava/io/PrintWriter;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fillInStackTrace</name>
                <desc>()Ljava/lang/Throwable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>fillInStackTrace</name>
                <desc>(I)Ljava/lang/Throwable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getStackTrace</name>
                <desc>()[Ljava/lang/StackTraceElement;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOurStackTrace</name>
                <desc>()[Ljava/lang/StackTraceElement;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setStackTrace</name>
                <desc>([Ljava/lang/StackTraceElement;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getStackTraceDepth</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getStackTraceElement</name>
                <desc>(I)Ljava/lang/StackTraceElement;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>writeObject</name>
                <desc>(Ljava/io/ObjectOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addSuppressed</name>
                <desc>(Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSuppressed</name>
                <desc>()[Ljava/lang/Throwable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.AbstractStringBuilder</name>
        <fields>
            <field>
                <name>value</name>
                <desc>[C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>count</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>capacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ensureCapacity</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setLength</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>charAt</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointCount</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offsetByCodePoints</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>(II[CI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setCharAt</name>
                <desc>(IC)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([CII)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Z)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(J)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(F)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(D)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>delete</name>
                <desc>(II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendCodePoint</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deleteCharAt</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSequence</name>
                <desc>(II)Ljava/lang/CharSequence;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[CII)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IZ)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IC)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IJ)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IF)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ID)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>()Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getValue</name>
                <desc>()[C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Class$ReflectionData</name>
        <fields>
            <field>
                <name>declaredFields</name>
                <desc>[Ljava/lang/reflect/Field;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>publicFields</name>
                <desc>[Ljava/lang/reflect/Field;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>declaredMethods</name>
                <desc>[Ljava/lang/reflect/Method;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>publicMethods</name>
                <desc>[Ljava/lang/reflect/Method;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>declaredConstructors</name>
                <desc>[Ljava/lang/reflect/Constructor;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>publicConstructors</name>
                <desc>[Ljava/lang/reflect/Constructor;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>declaredPublicFields</name>
                <desc>[Ljava/lang/reflect/Field;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>declaredPublicMethods</name>
                <desc>[Ljava/lang/reflect/Method;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>interfaces</name>
                <desc>[Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>redefinedCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Cloneable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ExceptionInInitializerError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Deprecated</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Class$Atomic</name>
        <fields>
            <field>
                <name>unsafe</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reflectionDataOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>annotationTypeOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>annotationDataOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>objectFieldOffset</name>
                <desc>([Ljava/lang/reflect/Field;Ljava/lang/String;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>casReflectionData</name>
                <desc>(Ljava/lang/Class;Ljava/lang/ref/SoftReference;Ljava/lang/ref/SoftReference;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>casAnnotationType</name>
                <desc>
                    (Ljava/lang/Class;Lsun/reflect/annotation/AnnotationType;Lsun/reflect/annotation/AnnotationType;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>casAnnotationData</name>
                <desc>(Ljava/lang/Class;Ljava/lang/Class$AnnotationData;Ljava/lang/Class$AnnotationData;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.LinkageError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.InstantiationException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ThreadLocal</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ClassNotFoundException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getException</name>
                <desc>()Ljava/lang/Throwable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCause</name>
                <desc>()Ljava/lang/Throwable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.VerifyError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Throwable$WrappedPrintWriter</name>
        <fields>
            <field>
                <name>printWriter</name>
                <desc>Ljava/io/PrintWriter;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PrintWriter;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lock</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.InstantiationError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.InheritableThreadLocal</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.UnsatisfiedLinkError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Shutdown</name>
        <fields>
            <field>
                <name>RUNNING</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HOOKS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FINALIZERS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>state</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>runFinalizersOnExit</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_SYSTEM_HOOKS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>hooks</name>
                <desc>[Ljava/lang/Runnable;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>currentRunningHook</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lock</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>haltLock</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>setRunFinalizersOnExit</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(IZLjava/lang/Runnable;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>halt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>halt0</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>exit</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Shutdown$Lock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ClassFormatError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.StackTraceElement</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLineNumber</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClassName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMethodName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isNativeMethod</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Class$EnclosingMethodInfo</name>
        <fields></fields>
        <methods>
            <method>
                <name>isPartial</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isConstructor</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isMethod</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEnclosingClass</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDescriptor</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Character$CharacterCache</name>
        <fields>
            <field>
                <name>cache</name>
                <desc>[Ljava/lang/Character;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Throwable$WrappedPrintStream</name>
        <fields>
            <field>
                <name>printStream</name>
                <desc>Ljava/io/PrintStream;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PrintStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lock</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Number</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.NoSuchFieldError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ArithmeticException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.AbstractMethodError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Character$Subset</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Runnable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ArrayIndexOutOfBoundsException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.String</name>
        <fields>
            <field>
                <name>value</name>
                <desc>[C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialPersistentFields</name>
                <desc>[Ljava/io/ObjectStreamField;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CASE_INSENSITIVE_ORDER</name>
                <desc>Ljava/util/Comparator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkBounds</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BIILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BIILjava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BLjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BLjava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/StringBuffer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/StringBuilder;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([CZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>charAt</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointCount</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offsetByCodePoints</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>([CI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>(II[CI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBytes</name>
                <desc>(II[BI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBytes</name>
                <desc>(Ljava/lang/String;)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBytes</name>
                <desc>(Ljava/nio/charset/Charset;)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBytes</name>
                <desc>()[B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contentEquals</name>
                <desc>(Ljava/lang/StringBuffer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contentEquals</name>
                <desc>(Ljava/lang/CharSequence;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equalsIgnoreCase</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareToIgnoreCase</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>regionMatches</name>
                <desc>(ILjava/lang/String;II)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>regionMatches</name>
                <desc>(ZILjava/lang/String;II)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>startsWith</name>
                <desc>(Ljava/lang/String;I)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>startsWith</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>endsWith</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>([CIILjava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>([CII[CIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>([CIILjava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>([CII[CIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSequence</name>
                <desc>(II)Ljava/lang/CharSequence;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>concat</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(CC)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>matches</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/CharSequence;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceFirst</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>split</name>
                <desc>(Ljava/lang/String;I)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>split</name>
                <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>join</name>
                <desc>(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>join</name>
                <desc>(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toLowerCase</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toLowerCase</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUpperCase</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUpperCase</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trim</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toCharArray</name>
                <desc>()[C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params>
                    <param>2</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>([C)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>([CII)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyValueOf</name>
                <desc>([CII)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyValueOf</name>
                <desc>([C)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Z)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(C)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(F)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(D)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>intern</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Math</name>
        <fields>
            <field>
                <name>E</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PI</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>sin</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cos</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tan</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>asin</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>acos</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>atan</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toRadians</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toDegrees</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exp</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>log10</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sqrt</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cbrt</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>IEEEremainder</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ceil</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>floor</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rint</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>atan2</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>pow</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>round</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>round</name>
                <desc>(D)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>random</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ulp</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ulp</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>signum</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>signum</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sinh</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cosh</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tanh</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hypot</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>expm1</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>log1p</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copySign</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copySign</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExponent</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExponent</name>
                <desc>(D)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextAfter</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextAfter</name>
                <desc>(FD)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextUp</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextUp</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>scalb</name>
                <desc>(DI)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>scalb</name>
                <desc>(FI)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Character$UnicodeScript</name>
        <fields>
            <field>
                <name>COMMON</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GREEK</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYRILLIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARMENIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HEBREW</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SYRIAC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>THAANA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEVANAGARI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BENGALI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GURMUKHI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GUJARATI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ORIYA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAMIL</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TELUGU</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KANNADA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MALAYALAM</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SINHALA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>THAI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LAO</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TIBETAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MYANMAR</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GEORGIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANGUL</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ETHIOPIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHEROKEE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CANADIAN_ABORIGINAL</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OGHAM</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RUNIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KHMER</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MONGOLIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HIRAGANA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KATAKANA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BOPOMOFO</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>YI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_ITALIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GOTHIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DESERET</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INHERITED</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAGALOG</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANUNOO</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BUHID</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAGBANWA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LIMBU</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_LE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LINEAR_B</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UGARITIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SHAVIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OSMANYA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYPRIOT</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BRAILLE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BUGINESE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COPTIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NEW_TAI_LUE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GLAGOLITIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TIFINAGH</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SYLOTI_NAGRI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_PERSIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KHAROSHTHI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BALINESE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CUNEIFORM</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHOENICIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHAGS_PA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NKO</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUNDANESE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BATAK</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LEPCHA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OL_CHIKI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VAI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SAURASHTRA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KAYAH_LI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>REJANG</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LYCIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CARIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LYDIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHAM</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_THAM</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_VIET</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AVESTAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EGYPTIAN_HIEROGLYPHS</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SAMARITAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MANDAIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LISU</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BAMUM</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JAVANESE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEETEI_MAYEK</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPERIAL_ARAMAIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_SOUTH_ARABIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INSCRIPTIONAL_PARTHIAN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INSCRIPTIONAL_PAHLAVI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_TURKIC</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BRAHMI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KAITHI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEROITIC_HIEROGLYPHS</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEROITIC_CURSIVE</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SORA_SOMPENG</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHAKMA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SHARADA</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAKRI</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIAO</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNKNOWN</name>
                <desc>Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>scriptStarts</name>
                <desc>[I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>scripts</name>
                <desc>[Ljava/lang/Character$UnicodeScript;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>aliases</name>
                <desc>Ljava/util/HashMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>of</name>
                <desc>(I)Ljava/lang/Character$UnicodeScript;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forName</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Character$UnicodeScript;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.StrictMath</name>
        <fields>
            <field>
                <name>E</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PI</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>sin</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cos</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tan</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>asin</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>acos</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>atan</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toRadians</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toDegrees</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exp</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>log10</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sqrt</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cbrt</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>IEEEremainder</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ceil</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>floor</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rint</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>atan2</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>pow</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>round</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>round</name>
                <desc>(D)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>random</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>abs</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ulp</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ulp</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>signum</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>signum</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>sinh</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cosh</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tanh</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hypot</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>expm1</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>log1p</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copySign</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copySign</name>
                <desc>(FF)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExponent</name>
                <desc>(F)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExponent</name>
                <desc>(D)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextAfter</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextAfter</name>
                <desc>(FD)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextUp</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextUp</name>
                <desc>(F)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>scalb</name>
                <desc>(DI)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>scalb</name>
                <desc>(FI)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.IndexOutOfBoundsException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.UnsupportedOperationException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Short</name>
        <fields>
            <field>
                <name>MIN_VALUE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_VALUE</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYTES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>(S)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseShort</name>
                <desc>(Ljava/lang/String;I)S</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseShort</name>
                <desc>(Ljava/lang/String;)S</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;I)Ljava/lang/Short;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Short;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valueOf</name>
                <desc>(S)Ljava/lang/Short;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>decode</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Short;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(S)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>byteValue</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>shortValue</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>longValue</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floatValue</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleValue</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(S)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Short;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(SS)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseBytes</name>
                <desc>(S)S</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedInt</name>
                <desc>(S)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toUnsignedLong</name>
                <desc>(S)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.StringBuilder</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/CharSequence;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/StringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/String;)Ljava/lang/StringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([C)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([CII)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Z)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(I)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(J)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(F)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(D)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendCodePoint</name>
                <desc>(I)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>delete</name>
                <desc>(II)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deleteCharAt</name>
                <desc>(I)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(IILjava/lang/String;)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[CII)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/String;)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[C)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;II)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IZ)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IC)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(II)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IJ)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IF)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ID)Ljava/lang/StringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>()Ljava/lang/StringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>()Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ID)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IF)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IJ)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IC)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(IZ)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insert</name>
                <desc>(I[CII)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(II)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSequence</name>
                <desc>(II)Ljava/lang/CharSequence;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>substring</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deleteCharAt</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendCodePoint</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>delete</name>
                <desc>(II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(D)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(F)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(J)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(I)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Z)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([CII)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>([C)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setCharAt</name>
                <desc>(IC)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getChars</name>
                <desc>(II[CI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>offsetByCodePoints</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointCount</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointBefore</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>codePointAt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>charAt</name>
                <desc>(I)C</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLength</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ensureCapacity</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>capacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Appendable</name>
        <fields></fields>
        <methods>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.System</name>
        <fields>
            <field>
                <name>in</name>
                <desc>Ljava/io/InputStream;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>out</name>
                <desc>Ljava/io/PrintStream;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>err</name>
                <desc>Ljava/io/PrintStream;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>setIn</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setOut</name>
                <desc>(Ljava/io/PrintStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setErr</name>
                <desc>(Ljava/io/PrintStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>currentTimeMillis</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nanoTime</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>arraycopy</name>
                <desc>(Ljava/lang/Object;ILjava/lang/Object;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>identityHashCode</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProperties</name>
                <desc>()Ljava/util/Properties;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProperty</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProperty</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setProperty</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clearProperty</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getenv</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getenv</name>
                <desc>()Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>exit</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>runFinalizersOnExit</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>load</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>loadLibrary</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>mapLibraryName</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.ArrayStoreException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.ProcessBuilder</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>command</name>
                <desc>(Ljava/util/List;)Ljava/lang/ProcessBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>command</name>
                <desc>([Ljava/lang/String;)Ljava/lang/ProcessBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>command</name>
                <desc>()Ljava/util/List;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>environment</name>
                <desc>()Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>directory</name>
                <desc>(Ljava/io/File;)Ljava/lang/ProcessBuilder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>redirectErrorStream</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>redirectErrorStream</name>
                <desc>(Z)Ljava/lang/ProcessBuilder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>start</name>
                <desc>()Ljava/lang/Process;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.StringCoding$StringEncoder</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.StringCoding</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.SystemClassLoaderAction</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.NoClassDefFoundError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.RuntimeException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Throwable;ZZ)V</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.AssertionStatusDirectives</name>
        <fields>
            <field>
                <name>classes</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>classEnabled</name>
                <desc>[Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>packages</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>packageEnabled</name>
                <desc>[Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>deflt</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.Character$UnicodeBlock</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BASIC_LATIN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN_1_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN_EXTENDED_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN_EXTENDED_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IPA_EXTENSIONS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SPACING_MODIFIER_LETTERS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMBINING_DIACRITICAL_MARKS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GREEK</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYRILLIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARMENIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HEBREW</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEVANAGARI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BENGALI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GURMUKHI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GUJARATI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ORIYA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAMIL</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TELUGU</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KANNADA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MALAYALAM</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>THAI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LAO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TIBETAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GEORGIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANGUL_JAMO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN_EXTENDED_ADDITIONAL</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GREEK_EXTENDED</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GENERAL_PUNCTUATION</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPERSCRIPTS_AND_SUBSCRIPTS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CURRENCY_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMBINING_MARKS_FOR_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LETTERLIKE_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NUMBER_FORMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARROWS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MATHEMATICAL_OPERATORS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MISCELLANEOUS_TECHNICAL</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONTROL_PICTURES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OPTICAL_CHARACTER_RECOGNITION</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENCLOSED_ALPHANUMERICS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BOX_DRAWING</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BLOCK_ELEMENTS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GEOMETRIC_SHAPES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MISCELLANEOUS_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DINGBATS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_SYMBOLS_AND_PUNCTUATION</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HIRAGANA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KATAKANA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BOPOMOFO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANGUL_COMPATIBILITY_JAMO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KANBUN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENCLOSED_CJK_LETTERS_AND_MONTHS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_COMPATIBILITY</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_UNIFIED_IDEOGRAPHS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANGUL_SYLLABLES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PRIVATE_USE_AREA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_COMPATIBILITY_IDEOGRAPHS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ALPHABETIC_PRESENTATION_FORMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC_PRESENTATION_FORMS_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMBINING_HALF_MARKS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_COMPATIBILITY_FORMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SMALL_FORM_VARIANTS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC_PRESENTATION_FORMS_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HALFWIDTH_AND_FULLWIDTH_FORMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SPECIALS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SURROGATES_AREA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SYRIAC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>THAANA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SINHALA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MYANMAR</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ETHIOPIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHEROKEE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OGHAM</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RUNIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KHMER</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MONGOLIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BRAILLE_PATTERNS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_RADICALS_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KANGXI_RADICALS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IDEOGRAPHIC_DESCRIPTION_CHARACTERS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BOPOMOFO_EXTENDED</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>YI_SYLLABLES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>YI_RADICALS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYRILLIC_SUPPLEMENTARY</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAGALOG</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANUNOO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BUHID</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAGBANWA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LIMBU</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_LE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KHMER_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHONETIC_EXTENSIONS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPLEMENTAL_ARROWS_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPLEMENTAL_ARROWS_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPLEMENTAL_MATHEMATICAL_OPERATORS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MISCELLANEOUS_SYMBOLS_AND_ARROWS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KATAKANA_PHONETIC_EXTENSIONS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>YIJING_HEXAGRAM_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VARIATION_SELECTORS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LINEAR_B_SYLLABARY</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LINEAR_B_IDEOGRAMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AEGEAN_NUMBERS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_ITALIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GOTHIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UGARITIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DESERET</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SHAVIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OSMANYA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYPRIOT_SYLLABARY</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BYZANTINE_MUSICAL_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MUSICAL_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_XUAN_JING_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MATHEMATICAL_ALPHANUMERIC_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAGS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VARIATION_SELECTORS_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPLEMENTARY_PRIVATE_USE_AREA_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPLEMENTARY_PRIVATE_USE_AREA_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HIGH_SURROGATES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HIGH_PRIVATE_USE_SURROGATES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LOW_SURROGATES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NKO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SAMARITAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MANDAIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ETHIOPIC_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NEW_TAI_LUE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BUGINESE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_THAM</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BALINESE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUNDANESE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BATAK</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LEPCHA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OL_CHIKI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VEDIC_EXTENSIONS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHONETIC_EXTENSIONS_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMBINING_DIACRITICAL_MARKS_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GLAGOLITIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN_EXTENDED_C</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COPTIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GEORGIAN_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TIFINAGH</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ETHIOPIC_EXTENDED</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYRILLIC_EXTENDED_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUPPLEMENTAL_PUNCTUATION</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_STROKES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LISU</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VAI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CYRILLIC_EXTENDED_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BAMUM</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_TONE_LETTERS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LATIN_EXTENDED_D</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SYLOTI_NAGRI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMMON_INDIC_NUMBER_FORMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHAGS_PA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SAURASHTRA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEVANAGARI_EXTENDED</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KAYAH_LI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>REJANG</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANGUL_JAMO_EXTENDED_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JAVANESE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHAM</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MYANMAR_EXTENDED_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAI_VIET</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ETHIOPIC_EXTENDED_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEETEI_MAYEK</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HANGUL_JAMO_EXTENDED_B</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VERTICAL_FORMS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ANCIENT_GREEK_NUMBERS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ANCIENT_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHAISTOS_DISC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LYCIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CARIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_PERSIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPERIAL_ARAMAIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PHOENICIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LYDIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KHAROSHTHI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_SOUTH_ARABIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AVESTAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INSCRIPTIONAL_PARTHIAN</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INSCRIPTIONAL_PAHLAVI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OLD_TURKIC</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RUMI_NUMERAL_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BRAHMI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KAITHI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CUNEIFORM</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CUNEIFORM_NUMBERS_AND_PUNCTUATION</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EGYPTIAN_HIEROGLYPHS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BAMUM_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KANA_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ANCIENT_GREEK_MUSICAL_NOTATION</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COUNTING_ROD_NUMERALS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAHJONG_TILES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOMINO_TILES</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PLAYING_CARDS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENCLOSED_ALPHANUMERIC_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENCLOSED_IDEOGRAPHIC_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMOTICONS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TRANSPORT_AND_MAP_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ALCHEMICAL_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC_EXTENDED_A</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUNDANESE_SUPPLEMENT</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEETEI_MAYEK_EXTENSIONS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEROITIC_HIEROGLYPHS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MEROITIC_CURSIVE</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SORA_SOMPENG</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHAKMA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SHARADA</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAKRI</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIAO</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS</name>
                <desc>Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>blockStarts</name>
                <desc>[I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>blocks</name>
                <desc>[Ljava/lang/Character$UnicodeBlock;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;[Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(C)Ljava/lang/Character$UnicodeBlock;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(I)Ljava/lang/Character$UnicodeBlock;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forName</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Character$UnicodeBlock;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.OutOfMemoryError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.NoSuchMethodError</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.lang.SecurityManager</name>
        <fields></fields>
        <methods>
            <method>
                <name>getInCheck</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSecurityContext</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkPermission</name>
                <desc>(Ljava/security/Permission;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkPermission</name>
                <desc>(Ljava/security/Permission;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkAccess</name>
                <desc>(Ljava/lang/Thread;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkAccess</name>
                <desc>(Ljava/lang/ThreadGroup;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkExit</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkExec</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkLink</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkRead</name>
                <desc>(Ljava/io/FileDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkRead</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkRead</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkWrite</name>
                <desc>(Ljava/io/FileDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkWrite</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkDelete</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkConnect</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkConnect</name>
                <desc>(Ljava/lang/String;ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkListen</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkAccept</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkMulticast</name>
                <desc>(Ljava/net/InetAddress;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkMulticast</name>
                <desc>(Ljava/net/InetAddress;B)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkPropertyAccess</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkTopLevelWindow</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkPackageAccess</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkPackageDefinition</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkMemberAccess</name>
                <desc>(Ljava/lang/Class;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkSecurityAccess</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getThreadGroup</name>
                <desc>()Ljava/lang/ThreadGroup;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Throwable$PrintStreamOrWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>lock</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.lang.Short$ShortCache</name>
        <fields>
            <field>
                <name>cache</name>
                <desc>[Ljava/lang/Short;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedSortedMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sm</name>
                <desc>Ljava/util/SortedMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedMap;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableNavigableSet$EmptyNavigableSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.OptionalDouble</name>
        <fields></fields>
        <methods>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(D)Ljava/util/OptionalDouble;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAsDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isPresent</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ifPresent</name>
                <desc>(Ljava/util/function/DoubleConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>orElse</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseGet</name>
                <desc>(Ljava/util/function/DoubleSupplier;)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseThrow</name>
                <desc>(Ljava/util/function/Supplier;)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.NavigableMap</name>
        <fields></fields>
        <methods>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Calendar$CalendarAccessControlContext</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedSortedSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ss</name>
                <desc>Ljava/util/SortedSet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap</name>
        <fields>
            <field>
                <name>comparator</name>
                <desc>Ljava/util/Comparator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>root</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>modCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/TreeMap$EntrySet;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>navigableKeySet</name>
                <desc>Ljava/util/TreeMap$KeySet;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>descendingMap</name>
                <desc>Ljava/util/NavigableMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNBOUNDED</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RED</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BLACK</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryUsingComparator</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCeilingEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFloorEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getHigherEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLowerEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>valEquals</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>exportEntry</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/util/Map$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keyOrNull</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>key</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFirstEntry</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLastEntry</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>successor</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>predecessor</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>colorOf</name>
                <desc>(Ljava/util/TreeMap$Entry;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parentOf</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setColor</name>
                <desc>(Ljava/util/TreeMap$Entry;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>leftOf</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rightOf</name>
                <desc>(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readTreeSet</name>
                <desc>(ILjava/io/ObjectInputStream;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAllForTreeSet</name>
                <desc>(Ljava/util/SortedSet;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>buildFromSorted</name>
                <desc>
                    (IIIILjava/util/Iterator;Ljava/io/ObjectInputStream;Ljava/lang/Object;)Ljava/util/TreeMap$Entry;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeRedLevel</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySpliteratorFor</name>
                <desc>(Ljava/util/NavigableMap;)Ljava/util/Spliterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySpliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySpliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.SimpleTimeZone</name>
        <fields>
            <field>
                <name>WALL_TIME</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>STANDARD_TIME</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UTC_TIME</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/String;IIIIIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                    <param>9</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/String;IIIIIIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                    <param>9</param>
                    <param>10</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/String;IIIIIIIIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                    <param>9</param>
                    <param>10</param>
                    <param>11</param>
                    <param>12</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setStartYear</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setStartRule</name>
                <desc>(IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setStartRule</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setStartRule</name>
                <desc>(IIIIZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setEndRule</name>
                <desc>(IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setEndRule</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setEndRule</name>
                <desc>(IIIIZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getOffset</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOffset</name>
                <desc>(IIIIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawOffset</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setRawOffset</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDSTSavings</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDSTSavings</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useDaylightTime</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>inDaylightTime</name>
                <desc>(Ljava/util/Date;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasSameRules</name>
                <desc>(Ljava/util/TimeZone;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Date</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IIIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>UTC</name>
                <desc>(IIIIII)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getYear</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setYear</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMonth</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setMonth</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDate</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setDate</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDay</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getHours</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setHours</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMinutes</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setMinutes</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSeconds</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSeconds</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTime</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>before</name>
                <desc>(Ljava/util/Date;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>after</name>
                <desc>(Ljava/util/Date;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/util/Date;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toLocaleString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toGMTString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTimezoneOffset</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$AsLIFOQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>q</name>
                <desc>Ljava/util/Deque;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Deque;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$KeySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Properties$LineReader</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>
            java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator
        </name>
        <fields>
            <field>
                <name>s</name>
                <desc>Ljava/util/Spliterator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Spliterator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExactSizeIfKnown</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasCharacteristics</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getComparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$EmptyIterator</name>
        <fields>
            <field>
                <name>EMPTY_ITERATOR</name>
                <desc>Ljava/util/Collections$EmptyIterator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PropertyResourceBundle</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>handleGetObject</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getKeys</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayList$SubList</name>
        <fields>
            <field>
                <name>parent</name>
                <desc>Ljava/util/AbstractList;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>parentOffset</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>offset</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/ArrayList;Ljava/util/AbstractList;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeRange</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PrimitiveIterator$OfInt</name>
        <fields></fields>
        <methods>
            <method>
                <name>nextInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/IntConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumSet</name>
        <fields>
            <field>
                <name>elementType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>universe</name>
                <desc>[Ljava/lang/Enum;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ZERO_LENGTH_ENUM_ARRAY</name>
                <desc>[Ljava/lang/Enum;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Class;[Ljava/lang/Enum;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>noneOf</name>
                <desc>(Ljava/lang/Class;)Ljava/util/EnumSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>allOf</name>
                <desc>(Ljava/lang/Class;)Ljava/util/EnumSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>(Ljava/util/EnumSet;)Ljava/util/EnumSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>(Ljava/util/Collection;)Ljava/util/EnumSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>complementOf</name>
                <desc>(Ljava/util/EnumSet;)Ljava/util/EnumSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Enum;)Ljava/util/EnumSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>
                    (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Enum;[Ljava/lang/Enum;)Ljava/util/EnumSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>range</name>
                <desc>(Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/util/EnumSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUniverse</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/Enum;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>writeReplace</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedValueIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$Entry</name>
        <fields>
            <field>
                <name>hash</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/WeakHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;ILjava/util/WeakHashMap$Entry;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$KeyIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$CopiesList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>n</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractSequentialList</name>
        <fields></fields>
        <methods>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractSet</name>
        <fields></fields>
        <methods>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.StringJoiner</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/CharSequence;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setEmptyValue</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>(Ljava/util/StringJoiner;)Ljava/util/StringJoiner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PropertyPermissionCollection</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.RandomAccess</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Set;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Set;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$TreeNode</name>
        <fields>
            <field>
                <name>parent</name>
                <desc>Ljava/util/HashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>left</name>
                <desc>Ljava/util/HashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>right</name>
                <desc>Ljava/util/HashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>prev</name>
                <desc>Ljava/util/HashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>red</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>root</name>
                <desc>()Ljava/util/HashMap$TreeNode;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>moveRootToFront</name>
                <desc>([Ljava/util/HashMap$Node;Ljava/util/HashMap$TreeNode;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTreeNode</name>
                <desc>(ILjava/lang/Object;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tieBreakOrder</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>treeify</name>
                <desc>([Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>untreeify</name>
                <desc>(Ljava/util/HashMap;)Ljava/util/HashMap$Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>putTreeVal</name>
                <desc>
                    (Ljava/util/HashMap;[Ljava/util/HashMap$Node;ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/HashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeTreeNode</name>
                <desc>(Ljava/util/HashMap;[Ljava/util/HashMap$Node;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>split</name>
                <desc>(Ljava/util/HashMap;[Ljava/util/HashMap$Node;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>rotateLeft</name>
                <desc>(Ljava/util/HashMap$TreeNode;Ljava/util/HashMap$TreeNode;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateRight</name>
                <desc>(Ljava/util/HashMap$TreeNode;Ljava/util/HashMap$TreeNode;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>balanceInsertion</name>
                <desc>(Ljava/util/HashMap$TreeNode;Ljava/util/HashMap$TreeNode;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>balanceDeletion</name>
                <desc>(Ljava/util/HashMap$TreeNode;Ljava/util/HashMap$TreeNode;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkInvariants</name>
                <desc>(Ljava/util/HashMap$TreeNode;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PrimitiveIterator$OfDouble</name>
        <fields></fields>
        <methods>
            <method>
                <name>nextDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/DoubleConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Double;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Comparator</name>
        <fields></fields>
        <methods>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reversed</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>thenComparing</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>thenComparing</name>
                <desc>(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>thenComparing</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>thenComparingInt</name>
                <desc>(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>thenComparingLong</name>
                <desc>(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>thenComparingDouble</name>
                <desc>(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseOrder</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>naturalOrder</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullsFirst</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullsLast</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparing</name>
                <desc>(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparing</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingInt</name>
                <desc>(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingLong</name>
                <desc>(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingDouble</name>
                <desc>(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$KeyIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;IIILjava/util/concurrent/ConcurrentHashMap;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$CounterCell</name>
        <fields>
            <field>
                <name>value</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$CollectionView</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>map</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>oomeMsg</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMap</name>
                <desc>()Ljava/util/concurrent/ConcurrentHashMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$KeySpliterator</name>
        <fields>
            <field>
                <name>est</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/util/concurrent/ConcurrentHashMap$Node;IIIJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.Callable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceKeysToLongTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToLongFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/LongBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToLongTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToLongTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToLongTask;Ljava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Long;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceMappingsToIntTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToIntBiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/IntBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToIntTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToIntTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToIntTask;Ljava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedDeque$Node</name>
        <fields>
            <field>
                <name>prev</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>prevOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>itemOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>casItem</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lazySetNext</name>
                <desc>(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>casNext</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lazySetPrev</name>
                <desc>(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>casPrev</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$WaitQueue</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ReservationNode</name>
        <fields></fields>
        <methods>
            <method>
                <name>find</name>
                <desc>(ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.Future</name>
        <fields></fields>
        <methods>
            <method>
                <name>cancel</name>
                <desc>(Z)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isCancelled</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDone</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ReduceValuesTask</name>
        <fields>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ReduceValuesTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ReduceValuesTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$ReduceValuesTask;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceKeysTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysTask;Ljava/util/function/Function;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$SearchValuesTask</name>
        <fields>
            <field>
                <name>searchFunction</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>Ljava/util/concurrent/atomic/AtomicReference;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Function;Ljava/util/concurrent/atomic/AtomicReference;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentSkipListSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>m</name>
                <desc>Ljava/util/concurrent/ConcurrentNavigableMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>mapOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/ConcurrentNavigableMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/util/concurrent/ConcurrentSkipListSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.DelayQueue</name>
        <fields>
            <field>
                <name>lock</name>
                <desc>Ljava/util/concurrent/locks/ReentrantLock;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>q</name>
                <desc>Ljava/util/PriorityQueue;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>available</name>
                <desc>Ljava/util/concurrent/locks/Condition;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/util/concurrent/Delayed;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/util/concurrent/Delayed;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/util/concurrent/Delayed;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>poll</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Delayed;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>drainTo</name>
                <desc>(Ljava/util/Collection;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>drainTo</name>
                <desc>(Ljava/util/Collection;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remainingCapacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeEQ</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>poll</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$Node</name>
        <fields>
            <field>
                <name>hash</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$Traverser</name>
        <fields>
            <field>
                <name>tab</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>stack</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TableStack;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>spare</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TableStack;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseIndex</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseLimit</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseSize</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/util/concurrent/ConcurrentHashMap$Node;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>advance</name>
                <desc>()Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$Transferer</name>
        <fields></fields>
        <methods>
            <method>
                <name>transfer</name>
                <desc>(Ljava/lang/Object;ZJ)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$EntrySetView</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/util/Map$Entry;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.TimeUnit</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$SearchEntriesTask</name>
        <fields>
            <field>
                <name>searchFunction</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>Ljava/util/concurrent/atomic/AtomicReference;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Function;Ljava/util/concurrent/atomic/AtomicReference;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachTransformedKeyTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Function;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedDeque$Itr</name>
        <fields></fields>
        <methods>
            <method>
                <name>startNode</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextNode</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentMap</name>
        <fields></fields>
        <methods>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ValuesView</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedDeque</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>head</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tail</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PREV_TERMINATOR</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NEXT_TERMINATOR</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HOPS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>headOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tailOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>prevTerminator</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextTerminator</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>unlink</name>
                <desc>(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>succ</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>pred</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>first</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>last</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkNotNull</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>offerFirst</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerLast</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeFirstOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeLastOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$TransferQueue</name>
        <fields>
            <field>
                <name>head</name>
                <desc>Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tail</name>
                <desc>Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cleanMe</name>
                <desc>Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>headOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tailOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cleanMeOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>advanceHead</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>advanceTail</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>casCleanMe</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>transfer</name>
                <desc>(Ljava/lang/Object;ZJ)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>awaitFulfill</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/lang/Object;ZJ)Ljava/lang/Object;
                </desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clean</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedQueue$Node</name>
        <fields>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>itemOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>casItem</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lazySetNext</name>
                <desc>(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>casNext</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedQueue$Node;Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceEntriesToIntTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToIntFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/IntBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToIntTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToIntTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToIntTask;Ljava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceValuesToLongTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToLongFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/LongBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToLongTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToLongTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToLongTask;Ljava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Long;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceEntriesToDoubleTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToDoubleFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/DoubleBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToDoubleTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToDoubleTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToDoubleTask;Ljava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Double;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$TransferQueue$QNode</name>
        <fields>
            <field>
                <name>isData</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>itemOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>casNext</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>casItem</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryCancel</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isCancelled</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isOffList</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachValueTask</name>
        <fields>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ReduceEntriesTask</name>
        <fields>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>Ljava/util/Map$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ReduceEntriesTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ReduceEntriesTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$ReduceEntriesTask;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$EntrySpliterator</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>est</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;IIIJLjava/util/concurrent/ConcurrentHashMap;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$TreeNode</name>
        <fields>
            <field>
                <name>parent</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>left</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>right</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>prev</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>red</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findTreeNode</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Class;)Ljava/util/concurrent/ConcurrentHashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.BlockingDeque</name>
        <fields></fields>
        <methods>
            <method>
                <name>offerFirst</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerLast</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerFirst</name>
                <desc>(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerLast</name>
                <desc>(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollFirst</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>pollLast</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeFirstOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeLastOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>poll</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachTransformedMappingTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/BiFunction;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedQueue$Itr</name>
        <fields></fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceMappingsToDoubleTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToDoubleBiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/DoubleBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToDoubleTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToDoubleTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToDoubleTask;Ljava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Double;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedDeque$AbstractItr</name>
        <fields></fields>
        <methods>
            <method>
                <name>startNode</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextNode</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachEntryTask</name>
        <fields>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$KeySetView</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMap</name>
                <desc>()Ljava/util/concurrent/ConcurrentHashMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAXIMUM_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFAULT_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_ARRAY_SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFAULT_CONCURRENCY_LEVEL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LOAD_FACTOR</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TREEIFY_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNTREEIFY_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_TREEIFY_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_TRANSFER_STRIDE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RESIZE_STAMP_BITS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_RESIZERS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RESIZE_STAMP_SHIFT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MOVED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TREEBIN</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>RESERVED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HASH_BITS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NCPU</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialPersistentFields</name>
                <desc>[Ljava/io/ObjectStreamField;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>table</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextTable</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseCount</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sizeCtl</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>transferIndex</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cellsBusy</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>counterCells</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$CounterCell;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keySet</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$KeySetView;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>values</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ValuesView;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$EntrySetView;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>U</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZECTL</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TRANSFERINDEX</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BASECOUNT</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CELLSBUSY</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CELLVALUE</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ABASE</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ASHIFT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>spread</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tableSizeFor</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparableClassFor</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareComparables</name>
                <desc>(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tabAt</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;I)Ljava/util/concurrent/ConcurrentHashMap$Node;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>casTabAt</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;ILjava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$Node;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTabAt</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;ILjava/util/concurrent/ConcurrentHashMap$Node;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IFI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>putVal</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object;</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceNode</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keys</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>elements</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mappingCount</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newKeySet</name>
                <desc>()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newKeySet</name>
                <desc>(I)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>resizeStamp</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>initTable</name>
                <desc>()[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addCount</name>
                <desc>(JI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>helpTransfer</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$Node;)[Ljava/util/concurrent/ConcurrentHashMap$Node;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryPresize</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>transfer</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;[Ljava/util/concurrent/ConcurrentHashMap$Node;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sumCount</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>fullAddCount</name>
                <desc>(JZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>treeifyBin</name>
                <desc>([Ljava/util/concurrent/ConcurrentHashMap$Node;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>untreeify</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$Node;)Ljava/util/concurrent/ConcurrentHashMap$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>batchFor</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(JLjava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(JLjava/util/function/BiFunction;Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>search</name>
                <desc>(JLjava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(JLjava/util/function/BiFunction;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceToDouble</name>
                <desc>(JLjava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceToLong</name>
                <desc>(JLjava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceToInt</name>
                <desc>(JLjava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachKey</name>
                <desc>(JLjava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachKey</name>
                <desc>(JLjava/util/function/Function;Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>searchKeys</name>
                <desc>(JLjava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceKeys</name>
                <desc>(JLjava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceKeys</name>
                <desc>(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceKeysToDouble</name>
                <desc>(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceKeysToLong</name>
                <desc>(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceKeysToInt</name>
                <desc>(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachValue</name>
                <desc>(JLjava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachValue</name>
                <desc>(JLjava/util/function/Function;Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>searchValues</name>
                <desc>(JLjava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceValues</name>
                <desc>(JLjava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceValues</name>
                <desc>(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceValuesToDouble</name>
                <desc>(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceValuesToLong</name>
                <desc>(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceValuesToInt</name>
                <desc>(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachEntry</name>
                <desc>(JLjava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachEntry</name>
                <desc>(JLjava/util/function/Function;Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>searchEntries</name>
                <desc>(JLjava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceEntries</name>
                <desc>(JLjava/util/function/BiFunction;)Ljava/util/Map$Entry;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceEntries</name>
                <desc>(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduceEntriesToDouble</name>
                <desc>(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceEntriesToLong</name>
                <desc>(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduceEntriesToInt</name>
                <desc>(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ValueIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;IIILjava/util/concurrent/ConcurrentHashMap;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceMappingsTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsTask;Ljava/util/function/BiFunction;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceKeysToDoubleTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToDoubleFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/DoubleBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToDoubleTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToDoubleTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToDoubleTask;Ljava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Double;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$TableStack</name>
        <fields>
            <field>
                <name>length</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tab</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TableStack;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$TransferStack$SNode</name>
        <fields>
            <field>
                <name>mode</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>matchOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>casNext</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryMatch</name>
                <desc>(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isCancelled</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedDeque$DescendingItr</name>
        <fields></fields>
        <methods>
            <method>
                <name>startNode</name>
                <desc>()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextNode</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceMappingsToLongTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToLongBiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/LongBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToLongTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToLongTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceMappingsToLongTask;Ljava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Long;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ValueSpliterator</name>
        <fields>
            <field>
                <name>est</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/util/concurrent/ConcurrentHashMap$Node;IIIJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachKeyTask</name>
        <fields>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$TreeBin</name>
        <fields>
            <field>
                <name>root</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>first</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TreeNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>waiter</name>
                <desc>Ljava/lang/Thread;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lockState</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WRITER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WAITER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>READER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>U</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LOCKSTATE</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>tieBreakOrder</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>putTreeVal</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeTreeNode</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateLeft</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$TreeNode;Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)Ljava/util/concurrent/ConcurrentHashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rotateRight</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$TreeNode;Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)Ljava/util/concurrent/ConcurrentHashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>balanceInsertion</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$TreeNode;Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)Ljava/util/concurrent/ConcurrentHashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>balanceDeletion</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$TreeNode;Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)Ljava/util/concurrent/ConcurrentHashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkInvariants</name>
                <desc>(Ljava/util/concurrent/ConcurrentHashMap$TreeNode;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$SearchMappingsTask</name>
        <fields>
            <field>
                <name>searchFunction</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>Ljava/util/concurrent/atomic/AtomicReference;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/BiFunction;Ljava/util/concurrent/atomic/AtomicReference;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NCPUS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>maxTimedSpins</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>maxUntimedSpins</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>spinForTimeoutThreshold</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>transferer</name>
                <desc>Ljava/util/concurrent/SynchronousQueue$Transferer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>poll</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remainingCapacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>drainTo</name>
                <desc>(Ljava/util/Collection;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>drainTo</name>
                <desc>(Ljava/util/Collection;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>objectFieldOffset</name>
                <desc>(Lsun/misc/Unsafe;Ljava/lang/String;Ljava/lang/Class;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$EntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;IIILjava/util/concurrent/ConcurrentHashMap;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachTransformedEntryTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Function;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$BaseIterator</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastReturned</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    ([Ljava/util/concurrent/ConcurrentHashMap$Node;IIILjava/util/concurrent/ConcurrentHashMap;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasMoreElements</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForwardingNode</name>
        <fields>
            <field>
                <name>nextTable</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/util/concurrent/ConcurrentHashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceValuesToIntTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToIntFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/IntBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToIntTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToIntTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToIntTask;Ljava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceEntriesTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesTask;Ljava/util/function/Function;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$SearchKeysTask</name>
        <fields>
            <field>
                <name>searchFunction</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>Ljava/util/concurrent/atomic/AtomicReference;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Function;Ljava/util/concurrent/atomic/AtomicReference;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceEntriesToLongTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToLongFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/LongBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToLongTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToLongTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceEntriesToLongTask;Ljava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Long;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.DelayQueue$Itr</name>
        <fields>
            <field>
                <name>array</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cursor</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastRet</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/concurrent/DelayQueue;[Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceKeysToIntTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToIntFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/IntBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToIntTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToIntTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceKeysToIntTask;Ljava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$LifoWaitQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachMappingTask</name>
        <fields>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/BiConsumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/BiConsumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ForEachTransformedValueTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>action</name>
                <desc>Ljava/util/function/Consumer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/function/Function;Ljava/util/function/Consumer;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceValuesTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/Function;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesTask;Ljava/util/function/Function;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapEntry</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap;)V</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.locks.Lock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.locks.ReentrantLock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.locks.ReentrantReadWriteLock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$ReduceKeysTask</name>
        <fields>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/BiFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ReduceKeysTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$ReduceKeysTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$ReduceKeysTask;Ljava/util/function/BiFunction;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$Segment</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loadFactor</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$FifoWaitQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.concurrent.BlockingQueue</name>
        <fields></fields>
        <methods>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>poll</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remainingCapacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>drainTo</name>
                <desc>(Ljava/util/Collection;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>drainTo</name>
                <desc>(Ljava/util/Collection;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$MapReduceValuesToDoubleTask</name>
        <fields>
            <field>
                <name>transformer</name>
                <desc>Ljava/util/function/ToDoubleFunction;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reducer</name>
                <desc>Ljava/util/function/DoubleBinaryOperator;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>basis</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>result</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rights</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToDoubleTask;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nextRight</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToDoubleTask;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;Ljava/util/concurrent/ConcurrentHashMap$MapReduceValuesToDoubleTask;Ljava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                    <param>6</param>
                    <param>7</param>
                    <param>8</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Double;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRawResult</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentHashMap$BulkTask</name>
        <fields>
            <field>
                <name>tab</name>
                <desc>[Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>stack</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TableStack;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>spare</name>
                <desc>Ljava/util/concurrent/ConcurrentHashMap$TableStack;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseIndex</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseLimit</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseSize</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>batch</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentHashMap$BulkTask;III[Ljava/util/concurrent/ConcurrentHashMap$Node;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>advance</name>
                <desc>()Ljava/util/concurrent/ConcurrentHashMap$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ExecutorService</name>
        <fields></fields>
        <methods>
            <method>
                <name>shutdownNow</name>
                <desc>()Ljava/util/List;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isShutdown</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isTerminated</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>awaitTermination</name>
                <desc>(JLjava/util/concurrent/TimeUnit;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>submit</name>
                <desc>(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>submit</name>
                <desc>(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>submit</name>
                <desc>(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>invokeAll</name>
                <desc>(Ljava/util/Collection;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>invokeAll</name>
                <desc>(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>invokeAny</name>
                <desc>(Ljava/util/Collection;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>invokeAny</name>
                <desc>(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.ConcurrentLinkedQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>head</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedQueue$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tail</name>
                <desc>Ljava/util/concurrent/ConcurrentLinkedQueue$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>headOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tailOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>updateHead</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedQueue$Node;Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>succ</name>
                <desc>
                    (Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)Ljava/util/concurrent/ConcurrentLinkedQueue$Node;
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkNotNull</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.concurrent.SynchronousQueue$TransferStack</name>
        <fields>
            <field>
                <name>REQUEST</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DATA</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FULFILLING</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>head</name>
                <desc>Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNSAFE</name>
                <desc>Lsun/misc/Unsafe;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>headOffset</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>isFulfilling</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>casHead</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>snode</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;Ljava/lang/Object;Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;I)Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;
                </desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>transfer</name>
                <desc>(Ljava/lang/Object;ZJ)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>awaitFulfill</name>
                <desc>
                    (Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;ZJ)Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>shouldSpin</name>
                <desc>(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clean</name>
                <desc>(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PriorityQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/PriorityQueue;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFAULT_INITIAL_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAXIMUM_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFAULT_LOAD_FACTOR</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TREEIFY_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNTREEIFY_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_TREEIFY_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>table</name>
                <desc>[Ljava/util/HashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>modCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>threshold</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loadFactor</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hash</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparableClassFor</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Class;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareComparables</name>
                <desc>(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tableSizeFor</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putMapEntries</name>
                <desc>(Ljava/util/Map;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNode</name>
                <desc>(ILjava/lang/Object;)Ljava/util/HashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>putVal</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>resize</name>
                <desc>()[Ljava/util/HashMap$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>treeifyBin</name>
                <desc>([Ljava/util/HashMap$Node;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeNode</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/util/HashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>loadFactor</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>capacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newNode</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;
                </desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replacementNode</name>
                <desc>(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newTreeNode</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replacementTreeNode</name>
                <desc>(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>afterNodeAccess</name>
                <desc>(Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>afterNodeInsertion</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>afterNodeRemoval</name>
                <desc>(Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>internalWriteEntries</name>
                <desc>(Ljava/io/ObjectOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$EntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.SortedSet</name>
        <fields></fields>
        <methods>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$EntryIterator$Entry</name>
        <fields></fields>
        <methods>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Deque</name>
        <fields></fields>
        <methods>
            <method>
                <name>offerFirst</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerLast</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeFirstOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeLastOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$EntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Map$Entry</name>
        <fields></fields>
        <methods>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingByKey</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingByValue</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingByKey</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparingByValue</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$KeyIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Locale$Cache</name>
        <fields></fields>
        <methods>
            <method>
                <name>createObject</name>
                <desc>(Ljava/util/Locale$LocaleKey;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createObject</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.DualPivotQuicksort</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Set;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$ReverseComparator2</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>cmp</name>
                <desc>Ljava/util/Comparator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reversed</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>list</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ServiceLoader$LazyIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.List</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$IdentityHashMapIterator</name>
        <fields>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastReturnedIndex</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>indexValid</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>traversalTable</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Vector$Itr</name>
        <fields>
            <field>
                <name>cursor</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastRet</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayList$Itr</name>
        <fields>
            <field>
                <name>cursor</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastRet</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$KeySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap$SubMapKeyIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getComparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$EntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Spliterator$OfLong</name>
        <fields></fields>
        <methods>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator$OfLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/LongConsumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/LongConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator$OfPrimitive;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractList$Itr</name>
        <fields>
            <field>
                <name>cursor</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastRet</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.regex.ASCII</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Dollar</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$StartS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Loop</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Pos</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Behind</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$UnixDollar</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SingleU</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Conditional</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Dot</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Ctype</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SliceS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SingleS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$All</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$LazyLoop</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$LastMatch</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Prolog</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BackRef</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$CIBackRef</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Ques</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Utype</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Script</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$UnixDot</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$UnixCaret</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$End</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$CharPropertyNames$CloneableProperty</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SliceU</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BitClass</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$GroupHead</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.PatternSyntaxException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDescription</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPattern</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMessage</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BehindS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BnMS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$NotBehindS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SliceNode</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Single</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BmpCharProperty</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Category</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Block</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Bound</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.UnicodeProp</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$GroupRef</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Node</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Slice</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SliceIS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BnM</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$CharPropertyNames</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Start</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$TreeInfo</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Curly</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Neg</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$BranchConn</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SliceUS</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$CharProperty</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$GroupTail</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Matcher</name>
        <fields></fields>
        <methods>
            <method>
                <name>pattern</name>
                <desc>()Ljava/util/regex/Pattern;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toMatchResult</name>
                <desc>()Ljava/util/regex/MatchResult;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>usePattern</name>
                <desc>(Ljava/util/regex/Pattern;)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reset</name>
                <desc>()Ljava/util/regex/Matcher;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reset</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>start</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>start</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>end</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>end</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>group</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>group</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>groupCount</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>matches</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>find</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>find</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lookingAt</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>quoteReplacement</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendReplacement</name>
                <desc>(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>appendTail</name>
                <desc>(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceFirst</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>region</name>
                <desc>(II)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>regionStart</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>regionEnd</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasTransparentBounds</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useTransparentBounds</name>
                <desc>(Z)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasAnchoringBounds</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useAnchoringBounds</name>
                <desc>(Z)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hitEnd</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>requireEnd</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.regex.Pattern</name>
        <fields>
            <field>
                <name>UNIX_LINES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CASE_INSENSITIVE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COMMENTS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MULTILINE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LITERAL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DOTALL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNICODE_CASE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CANON_EQ</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>compile</name>
                <desc>(Ljava/lang/String;)Ljava/util/regex/Pattern;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compile</name>
                <desc>(Ljava/lang/String;I)Ljava/util/regex/Pattern;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>pattern</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>matcher</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flags</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>matches</name>
                <desc>(Ljava/lang/String;Ljava/lang/CharSequence;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>split</name>
                <desc>(Ljava/lang/CharSequence;I)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>split</name>
                <desc>(Ljava/lang/CharSequence;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>quote</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$GroupCurly</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SliceI</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$NotBehind</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Caret</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$LastNode</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Branch</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$Begin</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$SingleI</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.regex.Pattern$First</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TimSort</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$KeySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/IdentityHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/IdentityHashMap$KeySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Spliterator$OfPrimitive</name>
        <fields></fields>
        <methods>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap$SubMapIterator</name>
        <fields>
            <field>
                <name>lastReturned</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fenceKey</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextEntry</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>prevEntry</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedValues</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.zip.ZipCoder</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.ZipOutputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.CheckedInputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.ZipEntry</name>
        <fields>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>crc</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>csize</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>method</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>flag</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>extra</name>
                <desc>[B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>comment</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>STORED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFLATED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/zip/ZipEntry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTime</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSize</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCompressedSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setCompressedSize</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setCrc</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCrc</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setMethod</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMethod</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setExtra</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setComment</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isDirectory</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.zip.ZipFile</name>
        <fields>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>total</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>closeRequested</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>STORED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFLATED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OPEN_READ</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OPEN_DELETE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>usemmap</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>streams</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JZENTRY_NAME</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JZENTRY_EXTRA</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JZENTRY_COMMENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;ILjava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEntry</name>
                <desc>(Ljava/lang/String;)Ljava/util/zip/ZipEntry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEntry</name>
                <desc>(J[BZ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>freeEntry</name>
                <desc>(JJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getInputStream</name>
                <desc>(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entries</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNextEntry</name>
                <desc>(JI)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>close</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>open</name>
                <desc>(Ljava/lang/String;IJZ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTotal</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>(JJJ[BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryTime</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryCrc</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryCSize</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntrySize</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryMethod</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryFlag</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCommentBytes</name>
                <desc>(J)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntryBytes</name>
                <desc>(JI)[B</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getZipMessage</name>
                <desc>(J)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.zip.ZipFile$ZipFileInflaterInputStream</name>
        <fields>
            <field>
                <name>closeRequested</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>zfin</name>
                <desc>Ljava/util/zip/ZipFile$ZipFileInputStream;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/zip/ZipFile;Ljava/util/zip/ZipFile$ZipFileInputStream;Ljava/util/zip/Inflater;I)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.zip.Inflater</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.ZipFile$ZipFileInputStream</name>
        <fields>
            <field>
                <name>jzentry</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>rem</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/zip/ZipFile;J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.zip.DeflaterOutputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.ZipInputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.ZipOutputStream$XEntry</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.Adler32</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.Deflater</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.GZIPOutputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.CheckedOutputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.InflaterInputStream</name>
        <fields>
            <field>
                <name>inf</name>
                <desc>Ljava/util/zip/Inflater;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>buf</name>
                <desc>[B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>len</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>usesDefaultInflater</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.zip.Checksum</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.InflaterOutputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.DeflaterInputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.GZIPInputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.zip.CRC32</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedNavigableMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nm</name>
                <desc>Ljava/util/NavigableMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableMap;Ljava/lang/Class;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lowerEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floorEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ceilingEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>higherEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>firstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollFirstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollLastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SingletonSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$EntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$KeySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/WeakHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/WeakHashMap$KeySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumSet$SerializationProxy</name>
        <fields>
            <field>
                <name>elementType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>elements</name>
                <desc>[Ljava/lang/Enum;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/EnumSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$ValueSpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/TreeMap$ValueSpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.jar.Attributes</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/jar/Attributes;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getValue</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getValue</name>
                <desc>(Ljava/util/jar/Attributes$Name;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putValue</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/io/DataOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeMain</name>
                <desc>(Ljava/io/DataOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>(Ljava/util/jar/Manifest$FastInputStream;[B)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.jar.JarFile</name>
        <fields>
            <field>
                <name>MANIFEST_NAME</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>javaHome</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>jarNames</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;ZI)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMetaInfEntryNames</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getJarEntry</name>
                <desc>(Ljava/lang/String;)Ljava/util/jar/JarEntry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEntry</name>
                <desc>(Ljava/lang/String;)Ljava/util/zip/ZipEntry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>entries</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInputStream</name>
                <desc>(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasClassPathAttribute</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newEntry</name>
                <desc>(Ljava/util/zip/ZipEntry;)Ljava/util/jar/JarEntry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>entryNames</name>
                <desc>([Ljava/security/CodeSource;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>entries2</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCodeSources</name>
                <desc>(Ljava/net/URL;)[Ljava/security/CodeSource;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCodeSource</name>
                <desc>(Ljava/net/URL;Ljava/lang/String;)Ljava/security/CodeSource;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setEagerValidation</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getManifestDigests</name>
                <desc>()Ljava/util/List;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.jar.JarFile$JarFileEntry</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/jar/JarFile;Ljava/util/zip/ZipEntry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.jar.JarEntry</name>
        <fields>
            <field>
                <name>attr</name>
                <desc>Ljava/util/jar/Attributes;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>certs</name>
                <desc>[Ljava/security/cert/Certificate;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>signers</name>
                <desc>[Ljava/security/CodeSigner;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/zip/ZipEntry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/jar/JarEntry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.jar.Attributes$Name</name>
        <fields>
            <field>
                <name>MANIFEST_VERSION</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIGNATURE_VERSION</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONTENT_TYPE</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CLASS_PATH</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAIN_CLASS</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEALED</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EXTENSION_LIST</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EXTENSION_NAME</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EXTENSION_INSTALLATION</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPLEMENTATION_TITLE</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPLEMENTATION_VERSION</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPLEMENTATION_VENDOR</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPLEMENTATION_VENDOR_ID</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMPLEMENTATION_URL</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SPECIFICATION_TITLE</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SPECIFICATION_VERSION</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SPECIFICATION_VENDOR</name>
                <desc>Ljava/util/jar/Attributes$Name;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isValid</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isValid</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAlpha</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDigit</name>
                <desc>(C)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.jar.JarInputStream</name>
        <fields>
            <field>
                <name>doVerify</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNextEntry</name>
                <desc>()Ljava/util/zip/ZipEntry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createZipEntry</name>
                <desc>(Ljava/lang/String;)Ljava/util/zip/ZipEntry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$ValueIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Hashtable$Entry</name>
        <fields>
            <field>
                <name>hash</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/Hashtable$Entry;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/Hashtable$Entry;)V</desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>m</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keyType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>valueType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry</name>
        <fields>
            <field>
                <name>e</name>
                <desc>Ljava/util/Map$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>valueType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map$Entry;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.OptionalInt</name>
        <fields></fields>
        <methods>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/OptionalInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(I)Ljava/util/OptionalInt;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAsInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isPresent</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ifPresent</name>
                <desc>(Ljava/util/function/IntConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>orElse</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseGet</name>
                <desc>(Ljava/util/function/IntSupplier;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseThrow</name>
                <desc>(Ljava/util/function/Supplier;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$AscendingSubMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;ZLjava/lang/Object;ZZLjava/lang/Object;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                    <param>4</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySpliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subLowest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subHighest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subCeiling</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subHigher</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subFloor</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subLower</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$KeyIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableNavigableMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_NAVIGABLE_MAP</name>
                <desc>Ljava/util/Collections$UnmodifiableNavigableMap$EmptyNavigableMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nm</name>
                <desc>Ljava/util/NavigableMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lowerEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floorEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ceilingEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>higherEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>firstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollFirstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollLastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Locale$FilteringMode</name>
        <fields>
            <field>
                <name>AUTOSELECT_FILTERING</name>
                <desc>Ljava/util/Locale$FilteringMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EXTENDED_FILTERING</name>
                <desc>Ljava/util/Locale$FilteringMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IGNORE_EXTENDED_RANGES</name>
                <desc>Ljava/util/Locale$FilteringMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAP_EXTENDED_RANGES</name>
                <desc>Ljava/util/Locale$FilteringMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>REJECT_EXTENDED_RANGES</name>
                <desc>Ljava/util/Locale$FilteringMode;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.DoubleSummaryStatistics</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>combine</name>
                <desc>(Ljava/util/DoubleSummaryStatistics;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCount</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSum</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMin</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMax</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAverage</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedKeySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/LongConsumer;)Ljava/util/function/LongConsumer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.ToLongFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsLong</name>
                <desc>(Ljava/lang/Object;)J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongBinaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsLong</name>
                <desc>(JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleToLongFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsLong</name>
                <desc>(D)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.BiConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/BiConsumer;)Ljava/util/function/BiConsumer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.UnaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>identity</name>
                <desc>()Ljava/util/function/UnaryOperator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.Predicate</name>
        <fields></fields>
        <methods>
            <method>
                <name>test</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>and</name>
                <desc>(Ljava/util/function/Predicate;)Ljava/util/function/Predicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>negate</name>
                <desc>()Ljava/util/function/Predicate;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>or</name>
                <desc>(Ljava/util/function/Predicate;)Ljava/util/function/Predicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEqual</name>
                <desc>(Ljava/lang/Object;)Ljava/util/function/Predicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>apply</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>apply</name>
                <desc>(J)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.Supplier</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.function.DoublePredicate</name>
        <fields></fields>
        <methods>
            <method>
                <name>test</name>
                <desc>(D)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>and</name>
                <desc>(Ljava/util/function/DoublePredicate;)Ljava/util/function/DoublePredicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>negate</name>
                <desc>()Ljava/util/function/DoublePredicate;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>or</name>
                <desc>(Ljava/util/function/DoublePredicate;)Ljava/util/function/DoublePredicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntUnaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsInt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compose</name>
                <desc>(Ljava/util/function/IntUnaryOperator;)Ljava/util/function/IntUnaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/IntUnaryOperator;)Ljava/util/function/IntUnaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>identity</name>
                <desc>()Ljava/util/function/IntUnaryOperator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.Consumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntPredicate</name>
        <fields></fields>
        <methods>
            <method>
                <name>test</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>and</name>
                <desc>(Ljava/util/function/IntPredicate;)Ljava/util/function/IntPredicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>negate</name>
                <desc>()Ljava/util/function/IntPredicate;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>or</name>
                <desc>(Ljava/util/function/IntPredicate;)Ljava/util/function/IntPredicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.ObjLongConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(Ljava/lang/Object;J)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongUnaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsLong</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compose</name>
                <desc>(Ljava/util/function/LongUnaryOperator;)Ljava/util/function/LongUnaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/LongUnaryOperator;)Ljava/util/function/LongUnaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>identity</name>
                <desc>()Ljava/util/function/LongUnaryOperator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntToLongFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsLong</name>
                <desc>(I)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.ObjDoubleConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(Ljava/lang/Object;D)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntToDoubleFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsDouble</name>
                <desc>(I)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntSupplier</name>
        <fields></fields>
        <methods>
            <method>
                <name>getAsInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/DoubleConsumer;)Ljava/util/function/DoubleConsumer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.ToIntFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsInt</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleBinaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsDouble</name>
                <desc>(DD)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongToIntFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsInt</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.BiFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/function/BiFunction;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.BinaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>minBy</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/function/BinaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>maxBy</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/function/BinaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>apply</name>
                <desc>(D)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongToDoubleFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsDouble</name>
                <desc>(J)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleUnaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsDouble</name>
                <desc>(D)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compose</name>
                <desc>(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/function/DoubleUnaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/function/DoubleUnaryOperator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>identity</name>
                <desc>()Ljava/util/function/DoubleUnaryOperator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongSupplier</name>
        <fields></fields>
        <methods>
            <method>
                <name>getAsLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.LongPredicate</name>
        <fields></fields>
        <methods>
            <method>
                <name>test</name>
                <desc>(J)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>and</name>
                <desc>(Ljava/util/function/LongPredicate;)Ljava/util/function/LongPredicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>negate</name>
                <desc>()Ljava/util/function/LongPredicate;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>or</name>
                <desc>(Ljava/util/function/LongPredicate;)Ljava/util/function/LongPredicate;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleToIntFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsInt</name>
                <desc>(D)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.ObjIntConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(Ljava/lang/Object;I)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.ToDoubleFunction</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsDouble</name>
                <desc>(Ljava/lang/Object;)D</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.Function</name>
        <fields></fields>
        <methods>
            <method>
                <name>compose</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/function/Function;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/function/Function;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>identity</name>
                <desc>()Ljava/util/function/Function;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntConsumer</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>andThen</name>
                <desc>(Ljava/util/function/IntConsumer;)Ljava/util/function/IntConsumer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.IntBinaryOperator</name>
        <fields></fields>
        <methods>
            <method>
                <name>applyAsInt</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.function.DoubleSupplier</name>
        <fields></fields>
        <methods>
            <method>
                <name>getAsDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SetFromMap</name>
        <fields>
            <field>
                <name>m</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>s</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SingletonList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>list</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Spliterator$OfDouble</name>
        <fields></fields>
        <methods>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator$OfDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/DoubleConsumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/DoubleConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator$OfPrimitive;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedNavigableSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ns</name>
                <desc>Ljava/util/NavigableSet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableSet;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$TreeMapSpliterator</name>
        <fields>
            <field>
                <name>tree</name>
                <desc>Ljava/util/TreeMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>current</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fence</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>side</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>est</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEstimate</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Queue</name>
        <fields></fields>
        <methods>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedSortedMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sm</name>
                <desc>Ljava/util/SortedMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedList$ListItr</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/LinkedList;I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasPrevious</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>previousIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Enumeration</name>
        <fields></fields>
        <methods>
            <method>
                <name>hasMoreElements</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IllformedLocaleException</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Optional</name>
        <fields>
            <field>
                <name>EMPTY</name>
                <desc>Ljava/util/Optional;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/Optional;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ofNullable</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Optional;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isPresent</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ifPresent</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>filter</name>
                <desc>(Ljava/util/function/Predicate;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>map</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMap</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseGet</name>
                <desc>(Ljava/util/function/Supplier;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>orElseThrow</name>
                <desc>(Ljava/util/function/Supplier;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedRandomAccessList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Locale$Category</name>
        <fields>
            <field>
                <name>DISPLAY</name>
                <desc>Ljava/util/Locale$Category;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FORMAT</name>
                <desc>Ljava/util/Locale$Category;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>languageKey</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>scriptKey</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>countryKey</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>variantKey</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Hashtable$KeySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$BundleReference</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedQueue</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>queue</name>
                <desc>Ljava/util/Queue;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Queue;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IntSummaryStatistics</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>combine</name>
                <desc>(Ljava/util/IntSummaryStatistics;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCount</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSum</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMin</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMax</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAverage</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayDeque$DescendingIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Formattable</name>
        <fields></fields>
        <methods>
            <method>
                <name>formatTo</name>
                <desc>(Ljava/util/Formatter;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableSortedMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sm</name>
                <desc>Ljava/util/SortedMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.BitSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>flip</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>flip</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(IIZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clear</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clear</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(II)Ljava/util/BitSet;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextSetBit</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextClearBit</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intersects</name>
                <desc>(Ljava/util/BitSet;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>cardinality</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>and</name>
                <desc>(Ljava/util/BitSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>or</name>
                <desc>(Ljava/util/BitSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>xor</name>
                <desc>(Ljava/util/BitSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>andNot</name>
                <desc>(Ljava/util/BitSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractQueue</name>
        <fields></fields>
        <methods>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ComparableTimSort</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.ListIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasPrevious</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>previousIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Hashtable</name>
        <fields>
            <field>
                <name>table</name>
                <desc>[Ljava/util/Hashtable$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>count</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>modCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_ARRAY_SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>values</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KEYS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>VALUES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENTRIES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keys</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>elements</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EventObject</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getSource</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayDeque$DeqIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Formatter$BigDecimalLayoutForm</name>
        <fields>
            <field>
                <name>SCIENTIFIC</name>
                <desc>Ljava/util/Formatter$BigDecimalLayoutForm;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DECIMAL_FLOAT</name>
                <desc>Ljava/util/Formatter$BigDecimalLayoutForm;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$Values</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Vector$ListItr</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Vector;I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasPrevious</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>previousIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Hashtable$EntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/util/Map$Entry;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedRandomAccessList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedList$DescendingIterator</name>
        <fields>
            <field>
                <name>itr</name>
                <desc>Ljava/util/LinkedList$ListItr;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$HashMapSpliterator</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/HashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>current</name>
                <desc>Ljava/util/HashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fence</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>est</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/HashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFence</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Random</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setSeed</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>nextBytes</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>nextInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextInt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextFloat</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextGaussian</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$KeySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Dictionary</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keys</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>elements</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Currency</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;)Ljava/util/Currency;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/util/Locale;)Ljava/util/Currency;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCurrencyCode</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSymbol</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSymbol</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefaultFractionDigits</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$ValueIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap</name>
        <fields>
            <field>
                <name>m</name>
                <desc>Ljava/util/TreeMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fromStart</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>toEnd</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loInclusive</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>hiInclusive</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>descendingMapView</name>
                <desc>Ljava/util/NavigableMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySetView</name>
                <desc>Ljava/util/TreeMap$NavigableSubMap$EntrySetView;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>navigableKeySetView</name>
                <desc>Ljava/util/TreeMap$KeySet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;ZLjava/lang/Object;ZZLjava/lang/Object;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                    <param>4</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tooLow</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tooHigh</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>inRange</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>inClosedRange</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>inRange</name>
                <desc>(Ljava/lang/Object;Z)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>absLowest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absHighest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absCeiling</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absHigher</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absFloor</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absLower</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absHighFence</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absLowFence</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subLowest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subHighest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subCeiling</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subHigher</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subFloor</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subLower</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySpliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ceilingEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>higherEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floorEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lowerEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>firstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollFirstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollLastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap</name>
        <fields>
            <field>
                <name>DEFAULT_INITIAL_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAXIMUM_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFAULT_LOAD_FACTOR</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>table</name>
                <desc>[Ljava/util/WeakHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>loadFactor</name>
                <desc>F</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>queue</name>
                <desc>Ljava/lang/ref/ReferenceQueue;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>modCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NULL_KEY</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>maskNull</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmaskNull</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>eq</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hash</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexFor</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/WeakHashMap$Entry;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>resize</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeMapping</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$Values</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$Control</name>
        <fields>
            <field>
                <name>FORMAT_DEFAULT</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FORMAT_CLASS</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FORMAT_PROPERTIES</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TTL_DONT_CACHE</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TTL_NO_EXPIRATION_CONTROL</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getControl</name>
                <desc>(Ljava/util/List;)Ljava/util/ResourceBundle$Control;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNoFallbackControl</name>
                <desc>(Ljava/util/List;)Ljava/util/ResourceBundle$Control;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFormats</name>
                <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCandidateLocales</name>
                <desc>(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFallbackLocale</name>
                <desc>(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newBundle</name>
                <desc>
                    (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTimeToLive</name>
                <desc>(Ljava/lang/String;Ljava/util/Locale;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>needsReload</name>
                <desc>
                    (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toBundleName</name>
                <desc>(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toResourceName</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Spliterator$OfInt</name>
        <fields></fields>
        <methods>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator$OfInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/IntConsumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/IntConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator$OfPrimitive;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Hashtable$ValueCollection</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.RandomAccessSubList</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/AbstractList;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.FormattableFlags</name>
        <fields>
            <field>
                <name>LEFT_JUSTIFY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UPPERCASE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ALTERNATE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$Values</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>m</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>values</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Formatter$FixedString</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$EmptyList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections</name>
        <fields>
            <field>
                <name>BINARYSEARCH_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>REVERSE_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SHUFFLE_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FILL_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ROTATE_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>COPY_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>REPLACEALL_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INDEXOFSUBLIST_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>r</name>
                <desc>Ljava/util/Random;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_SET</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_LIST</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_MAP</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/List;Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexedBinarySearch</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iteratorBinarySearch</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/util/ListIterator;I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexedBinarySearch</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iteratorBinarySearch</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverse</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>shuffle</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>shuffle</name>
                <desc>(Ljava/util/List;Ljava/util/Random;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>swap</name>
                <desc>(Ljava/util/List;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>swap</name>
                <desc>([Ljava/lang/Object;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>copy</name>
                <desc>(Ljava/util/List;Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(Ljava/util/Collection;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(Ljava/util/Collection;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>rotate</name>
                <desc>(Ljava/util/List;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>rotate1</name>
                <desc>(Ljava/util/List;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>rotate2</name>
                <desc>(Ljava/util/List;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOfSubList</name>
                <desc>(Ljava/util/List;Ljava/util/List;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOfSubList</name>
                <desc>(Ljava/util/List;Ljava/util/List;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableCollection</name>
                <desc>(Ljava/util/Collection;)Ljava/util/Collection;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableSet</name>
                <desc>(Ljava/util/Set;)Ljava/util/Set;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableSortedSet</name>
                <desc>(Ljava/util/SortedSet;)Ljava/util/SortedSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableNavigableSet</name>
                <desc>(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableList</name>
                <desc>(Ljava/util/List;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableMap</name>
                <desc>(Ljava/util/Map;)Ljava/util/Map;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableSortedMap</name>
                <desc>(Ljava/util/SortedMap;)Ljava/util/SortedMap;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmodifiableNavigableMap</name>
                <desc>(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedCollection</name>
                <desc>(Ljava/util/Collection;)Ljava/util/Collection;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedCollection</name>
                <desc>(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/Collection;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedSet</name>
                <desc>(Ljava/util/Set;)Ljava/util/Set;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedSet</name>
                <desc>(Ljava/util/Set;Ljava/lang/Object;)Ljava/util/Set;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedSortedSet</name>
                <desc>(Ljava/util/SortedSet;)Ljava/util/SortedSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedNavigableSet</name>
                <desc>(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedList</name>
                <desc>(Ljava/util/List;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedList</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedMap</name>
                <desc>(Ljava/util/Map;)Ljava/util/Map;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedSortedMap</name>
                <desc>(Ljava/util/SortedMap;)Ljava/util/SortedMap;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>synchronizedNavigableMap</name>
                <desc>(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedCollection</name>
                <desc>(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>zeroLengthArray</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedQueue</name>
                <desc>(Ljava/util/Queue;Ljava/lang/Class;)Ljava/util/Queue;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedSet</name>
                <desc>(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedSortedSet</name>
                <desc>(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedNavigableSet</name>
                <desc>(Ljava/util/NavigableSet;Ljava/lang/Class;)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedList</name>
                <desc>(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedMap</name>
                <desc>(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedSortedMap</name>
                <desc>(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedNavigableMap</name>
                <desc>(Ljava/util/NavigableMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyListIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyEnumeration</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptySortedSet</name>
                <desc>()Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyNavigableSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyList</name>
                <desc>()Ljava/util/List;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyMap</name>
                <desc>()Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptySortedMap</name>
                <desc>()Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>emptyNavigableMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>singleton</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>singletonIterator</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>singletonSpliterator</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>singletonList</name>
                <desc>(Ljava/lang/Object;)Ljava/util/List;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>singletonMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nCopies</name>
                <desc>(ILjava/lang/Object;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseOrder</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reverseOrder</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>enumeration</name>
                <desc>(Ljava/util/Collection;)Ljava/util/Enumeration;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>list</name>
                <desc>(Ljava/util/Enumeration;)Ljava/util/ArrayList;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>eq</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>frequency</name>
                <desc>(Ljava/util/Collection;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>disjoint</name>
                <desc>(Ljava/util/Collection;Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;[Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newSetFromMap</name>
                <desc>(Ljava/util/Map;)Ljava/util/Set;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>asLifoQueue</name>
                <desc>(Ljava/util/Deque;)Ljava/util/Queue;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap$EntrySetView</name>
        <fields>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sizeModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$RBClassLoader</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Formatter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PrintStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>out</name>
                <desc>()Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;</desc>
                <params>
                    <param>2</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Arrays$NaturalOrder</name>
        <fields>
            <field>
                <name>INSTANCE</name>
                <desc>Ljava/util/Arrays$NaturalOrder;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$HashIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextEntry</name>
                <desc>()Ljava/util/WeakHashMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collection</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$EntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$EnumMapIterator</name>
        <fields>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastReturnedIndex</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$EntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$LoaderReference</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Locale$LocaleKey</name>
        <fields>
            <field>
                <name>base</name>
                <desc>Lsun/util/locale/BaseLocale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>hash</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$HashIterator</name>
        <fields>
            <field>
                <name>next</name>
                <desc>Ljava/util/HashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>current</name>
                <desc>Ljava/util/HashMap$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextNode</name>
                <desc>()Ljava/util/HashMap$Node;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractMap$SimpleImmutableEntry</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Arrays</name>
        <fields>
            <field>
                <name>MIN_ARRAY_SORT_GRAN</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INSERTIONSORT_THRESHOLD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>rangeCheck</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([JII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([S)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([SII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([FII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([DII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([S)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([SII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([JII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([FII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([DII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([Ljava/lang/Comparable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([Ljava/lang/Comparable;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([Ljava/lang/Object;Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSort</name>
                <desc>([Ljava/lang/Object;IILjava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>legacyMergeSort</name>
                <desc>([Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([Ljava/lang/Object;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>legacyMergeSort</name>
                <desc>([Ljava/lang/Object;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>mergeSort</name>
                <desc>([Ljava/lang/Object;[Ljava/lang/Object;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>swap</name>
                <desc>([Ljava/lang/Object;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([Ljava/lang/Object;Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>legacyMergeSort</name>
                <desc>([Ljava/lang/Object;Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>([Ljava/lang/Object;IILjava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>legacyMergeSort</name>
                <desc>([Ljava/lang/Object;IILjava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>mergeSort</name>
                <desc>([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([Ljava/lang/Object;IILjava/util/function/BinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([JLjava/util/function/LongBinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([JIILjava/util/function/LongBinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([DLjava/util/function/DoubleBinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([DIILjava/util/function/DoubleBinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([ILjava/util/function/IntBinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelPrefix</name>
                <desc>([IIILjava/util/function/IntBinaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([JJ)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([JIIJ)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([JIIJ)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([IIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([IIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([SS)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([SIIS)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([SIIS)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([CC)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([CIIC)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([CIIC)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([BB)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([BIIB)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([BIIB)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([DD)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([DIID)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([DIID)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([FF)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([FIIF)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([FIIF)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([Ljava/lang/Object;IILjava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([Ljava/lang/Object;IILjava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch</name>
                <desc>([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>binarySearch0</name>
                <desc>([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([J[J)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([I[I)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([S[S)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([C[C)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([B[B)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([Z[Z)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([D[D)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([F[F)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>([Ljava/lang/Object;[Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([JJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([JIIJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([SS)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([SIIS)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([CC)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([CIIC)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([BB)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([BIIB)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([ZZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([ZIIZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([DD)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([DIID)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([FF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([FIIF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([Ljava/lang/Object;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fill</name>
                <desc>([Ljava/lang/Object;IILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([Ljava/lang/Object;I)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([BI)[B</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([SI)[S</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([II)[I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([JI)[J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([CI)[C</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([FI)[F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([DI)[D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOf</name>
                <desc>([ZI)[Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([Ljava/lang/Object;II)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([BII)[B</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([SII)[S</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([III)[I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([JII)[J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([CII)[C</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([FII)[F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([DII)[D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyOfRange</name>
                <desc>([ZII)[Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>asList</name>
                <desc>([Ljava/lang/Object;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([J)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([I)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([S)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([C)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([B)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([Z)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([F)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([D)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>([Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>deepHashCode</name>
                <desc>([Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>deepEquals</name>
                <desc>([Ljava/lang/Object;[Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>deepEquals0</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([J)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([I)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([S)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([C)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([B)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([Z)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([F)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([D)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>([Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>deepToString</name>
                <desc>([Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>deepToString</name>
                <desc>([Ljava/lang/Object;Ljava/lang/StringBuilder;Ljava/util/Set;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAll</name>
                <desc>([Ljava/lang/Object;Ljava/util/function/IntFunction;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSetAll</name>
                <desc>([Ljava/lang/Object;Ljava/util/function/IntFunction;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAll</name>
                <desc>([ILjava/util/function/IntUnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSetAll</name>
                <desc>([ILjava/util/function/IntUnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAll</name>
                <desc>([JLjava/util/function/IntToLongFunction;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSetAll</name>
                <desc>([JLjava/util/function/IntToLongFunction;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAll</name>
                <desc>([DLjava/util/function/IntToDoubleFunction;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>parallelSetAll</name>
                <desc>([DLjava/util/function/IntToDoubleFunction;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([Ljava/lang/Object;)Ljava/util/Spliterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([Ljava/lang/Object;II)Ljava/util/Spliterator;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([I)Ljava/util/Spliterator$OfInt;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([III)Ljava/util/Spliterator$OfInt;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([J)Ljava/util/Spliterator$OfLong;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([JII)Ljava/util/Spliterator$OfLong;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([D)Ljava/util/Spliterator$OfDouble;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>([DII)Ljava/util/Spliterator$OfDouble;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([Ljava/lang/Object;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([Ljava/lang/Object;II)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([I)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([III)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([J)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([JII)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([D)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>([DII)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Arrays$LegacyMergeSort</name>
        <fields>
            <field>
                <name>userRequested</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.PrimitiveIterator$OfLong</name>
        <fields></fields>
        <methods>
            <method>
                <name>nextLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/LongConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Long;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$EntrySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/IdentityHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/IdentityHashMap$EntrySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$EmptySet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Vector$VectorSpliterator</name>
        <fields>
            <field>
                <name>list</name>
                <desc>Ljava/util/Vector;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Vector;[Ljava/lang/Object;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ServiceLoader</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>load</name>
                <desc>(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>load</name>
                <desc>(Ljava/lang/Class;)Ljava/util/ServiceLoader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>loadInstalled</name>
                <desc>(Ljava/lang/Class;)Ljava/util/ServiceLoader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$EntrySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/TreeMap$EntrySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getComparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.logging.Logger$SystemLoggerHelper</name>
        <fields>
            <field>
                <name>disableCallerCheck</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getBooleanProperty</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.logging.Logger</name>
        <fields>
            <field>
                <name>emptyHandlers</name>
                <desc>[Ljava/util/logging/Handler;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>offValue</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SYSTEM_LOGGER_RB_NAME</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>handlers</name>
                <desc>Ljava/util/concurrent/CopyOnWriteArrayList;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>useParentHandlers</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>treeLock</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>levelValue</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GLOBAL_LOGGER_NAME</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>global</name>
                <desc>Ljava/util/logging/Logger;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getGlobal</name>
                <desc>()Ljava/util/logging/Logger;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLogManager</name>
                <desc>(Ljava/util/logging/LogManager;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>demandLogger</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Ljava/util/logging/Logger;</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLogger</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Logger;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLogger</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/util/logging/Logger;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPlatformLogger</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Logger;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnonymousLogger</name>
                <desc>()Ljava/util/logging/Logger;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAnonymousLogger</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Logger;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/LogRecord;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/Level;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/Level;Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>log</name>
                <desc>(Ljava/util/logging/Level;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>2</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logp</name>
                <desc>(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logp</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Supplier;)V
                </desc>
                <params>
                    <param>3</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logp</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logp</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logp</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logp</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V
                </desc>
                <params>
                    <param>4</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logrb</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logrb</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logrb</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>logrb</name>
                <desc>
                    (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
                </desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>severe</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>warning</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>info</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>config</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>fine</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>finer</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>finest</name>
                <desc>(Ljava/util/function/Supplier;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isLoggable</name>
                <desc>(Ljava/util/logging/Level;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addHandler</name>
                <desc>(Ljava/util/logging/Handler;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getHandlers</name>
                <desc>()[Ljava/util/logging/Handler;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setUseParentHandlers</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getUseParentHandlers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findSystemResourceBundle</name>
                <desc>(Ljava/util/Locale;)Ljava/util/ResourceBundle;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findResourceBundle</name>
                <desc>(Ljava/lang/String;Z)Ljava/util/ResourceBundle;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setParent</name>
                <desc>(Ljava/util/logging/Logger;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeChildLogger</name>
                <desc>(Ljava/util/logging/LogManager$LoggerWeakRef;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.logging.SimpleFormatter</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.LogManager$LoggerWeakRef</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.LogRecord</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.XMLFormatter</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.LogManager$LogNode</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.Level$KnownLevel</name>
        <fields>
            <field>
                <name>nameToLevels</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>intToLevels</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>levelObject</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>mirroredLevel</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/logging/Level;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/util/logging/Level;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findByName</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Level$KnownLevel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findByValue</name>
                <desc>(I)Ljava/util/logging/Level$KnownLevel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findByLocalizedLevelName</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Level$KnownLevel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>matches</name>
                <desc>(Ljava/util/logging/Level;)Ljava/util/logging/Level$KnownLevel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.logging.LogManager$RootLogger</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.Formatter</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.LogManager$Cleaner</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.LogManager</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.logging.Level</name>
        <fields>
            <field>
                <name>defaultBundle</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>value</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OFF</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEVERE</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WARNING</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INFO</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONFIG</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FINE</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FINER</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FINEST</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ALL</name>
                <desc>Ljava/util/logging/Level;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLocalizedName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLevelName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLocalizedLevelName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findLevel</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Level;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>intValue</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;)Ljava/util/logging/Level;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$EmptyMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$ValueIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$DescendingSubMap$DescendingEntrySetView</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$IdentityHashMapSpliterator</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/IdentityHashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fence</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>est</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/IdentityHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFence</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$EntrySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/WeakHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/WeakHashMap$EntrySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.UUID</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(JJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>randomUUID</name>
                <desc>()Ljava/util/UUID;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nameUUIDFromBytes</name>
                <desc>([B)Ljava/util/UUID;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>fromString</name>
                <desc>(Ljava/lang/String;)Ljava/util/UUID;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLeastSignificantBits</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMostSignificantBits</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>version</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>variant</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>timestamp</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clockSequence</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>node</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/util/UUID;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$ReverseComparator</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>REVERSE_ORDER</name>
                <desc>Ljava/util/Collections$ReverseComparator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reversed</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractMap</name>
        <fields>
            <field>
                <name>keySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>values</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>eq</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TimeZone</name>
        <fields>
            <field>
                <name>SHORT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LONG</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getOffset</name>
                <desc>(IIIIII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOffset</name>
                <desc>(J)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setRawOffset</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRawOffset</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getID</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setID</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>(ZI)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>(ZILjava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDSTSavings</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useDaylightTime</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>inDaylightTime</name>
                <desc>(Ljava/util/Date;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTimeZone</name>
                <desc>(Ljava/lang/String;)Ljava/util/TimeZone;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAvailableIDs</name>
                <desc>(I)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAvailableIDs</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefault</name>
                <desc>()Ljava/util/TimeZone;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasSameRules</name>
                <desc>(Ljava/util/TimeZone;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.GregorianCalendar</name>
        <fields>
            <field>
                <name>BC</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TimeZone;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TimeZone;Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IIIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setGregorianChange</name>
                <desc>(Ljava/util/Date;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getGregorianChange</name>
                <desc>()Ljava/util/Date;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLeapYear</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>roll</name>
                <desc>(IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>roll</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMinimum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaximum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGreatestMinimum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLeastMaximum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getActualMinimum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getActualMaximum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTimeZone</name>
                <desc>()Ljava/util/TimeZone;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTimeZone</name>
                <desc>(Ljava/util/TimeZone;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.StreamSupport</name>
        <fields></fields>
        <methods>
            <method>
                <name>stream</name>
                <desc>(Ljava/util/Spliterator;Z)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>(Ljava/util/function/Supplier;IZ)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>intStream</name>
                <desc>(Ljava/util/Spliterator$OfInt;Z)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>intStream</name>
                <desc>(Ljava/util/function/Supplier;IZ)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>longStream</name>
                <desc>(Ljava/util/Spliterator$OfLong;Z)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>longStream</name>
                <desc>(Ljava/util/function/Supplier;IZ)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleStream</name>
                <desc>(Ljava/util/Spliterator$OfDouble;Z)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>doubleStream</name>
                <desc>(Ljava/util/function/Supplier;IZ)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.Collectors</name>
        <fields></fields>
        <methods>
            <method>
                <name>toCollection</name>
                <desc>(Ljava/util/function/Supplier;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toList</name>
                <desc>()Ljava/util/stream/Collector;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toSet</name>
                <desc>()Ljava/util/stream/Collector;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>joining</name>
                <desc>()Ljava/util/stream/Collector;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>joining</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>joining</name>
                <desc>
                    (Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapping</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>collectingAndThen</name>
                <desc>
                    (Ljava/util/stream/Collector;Ljava/util/function/Function;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>counting</name>
                <desc>()Ljava/util/stream/Collector;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>minBy</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>maxBy</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>summingInt</name>
                <desc>(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>summingLong</name>
                <desc>(Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>summingDouble</name>
                <desc>(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>averagingInt</name>
                <desc>(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>averagingLong</name>
                <desc>(Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>averagingDouble</name>
                <desc>(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reducing</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reducing</name>
                <desc>(Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reducing</name>
                <desc>
                    (Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>groupingBy</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>groupingBy</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>groupingBy</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>groupingByConcurrent</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>groupingByConcurrent</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>groupingByConcurrent</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Supplier;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>partitioningBy</name>
                <desc>(Ljava/util/function/Predicate;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>partitioningBy</name>
                <desc>
                    (Ljava/util/function/Predicate;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toMap</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toMap</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toMap</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;Ljava/util/function/Supplier;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toConcurrentMap</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toConcurrentMap</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toConcurrentMap</name>
                <desc>
                    (Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;Ljava/util/function/Supplier;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>summarizingInt</name>
                <desc>(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>summarizingLong</name>
                <desc>(Ljava/util/function/ToLongFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>summarizingDouble</name>
                <desc>(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/Collector;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.Stream$Builder</name>
        <fields></fields>
        <methods>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Ljava/util/stream/Stream$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>build</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.IntStream$Builder</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(I)Ljava/util/stream/IntStream$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>build</name>
                <desc>()Ljava/util/stream/IntStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.IntStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>filter</name>
                <desc>(Ljava/util/function/IntPredicate;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>map</name>
                <desc>(Ljava/util/function/IntUnaryOperator;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToObj</name>
                <desc>(Ljava/util/function/IntFunction;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToLong</name>
                <desc>(Ljava/util/function/IntToLongFunction;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToDouble</name>
                <desc>(Ljava/util/function/IntToDoubleFunction;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMap</name>
                <desc>(Ljava/util/function/IntFunction;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>distinct</name>
                <desc>()Ljava/util/stream/IntStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sorted</name>
                <desc>()Ljava/util/stream/IntStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>peek</name>
                <desc>(Ljava/util/function/IntConsumer;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>limit</name>
                <desc>(J)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/IntConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachOrdered</name>
                <desc>(Ljava/util/function/IntConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(ILjava/util/function/IntBinaryOperator;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(Ljava/util/function/IntBinaryOperator;)Ljava/util/OptionalInt;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>collect</name>
                <desc>
                    (Ljava/util/function/Supplier;Ljava/util/function/ObjIntConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>()Ljava/util/OptionalInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>()Ljava/util/OptionalInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>count</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>average</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>summaryStatistics</name>
                <desc>()Ljava/util/IntSummaryStatistics;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>anyMatch</name>
                <desc>(Ljava/util/function/IntPredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>allMatch</name>
                <desc>(Ljava/util/function/IntPredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>noneMatch</name>
                <desc>(Ljava/util/function/IntPredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findFirst</name>
                <desc>()Ljava/util/OptionalInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findAny</name>
                <desc>()Ljava/util/OptionalInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>asLongStream</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>asDoubleStream</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>boxed</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sequential</name>
                <desc>()Ljava/util/stream/IntStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallel</name>
                <desc>()Ljava/util/stream/IntStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/PrimitiveIterator$OfInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator$OfInt;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>builder</name>
                <desc>()Ljava/util/stream/IntStream$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/stream/IntStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(I)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>([I)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterate</name>
                <desc>(ILjava/util/function/IntUnaryOperator;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>generate</name>
                <desc>(Ljava/util/function/IntSupplier;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>range</name>
                <desc>(II)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rangeClosed</name>
                <desc>(II)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>concat</name>
                <desc>(Ljava/util/stream/IntStream;Ljava/util/stream/IntStream;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallel</name>
                <desc>()Ljava/util/stream/BaseStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sequential</name>
                <desc>()Ljava/util/stream/BaseStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.LongStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>filter</name>
                <desc>(Ljava/util/function/LongPredicate;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>map</name>
                <desc>(Ljava/util/function/LongUnaryOperator;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToObj</name>
                <desc>(Ljava/util/function/LongFunction;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToInt</name>
                <desc>(Ljava/util/function/LongToIntFunction;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToDouble</name>
                <desc>(Ljava/util/function/LongToDoubleFunction;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMap</name>
                <desc>(Ljava/util/function/LongFunction;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>distinct</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sorted</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>peek</name>
                <desc>(Ljava/util/function/LongConsumer;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>limit</name>
                <desc>(J)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/LongConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachOrdered</name>
                <desc>(Ljava/util/function/LongConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(JLjava/util/function/LongBinaryOperator;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(Ljava/util/function/LongBinaryOperator;)Ljava/util/OptionalLong;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>collect</name>
                <desc>
                    (Ljava/util/function/Supplier;Ljava/util/function/ObjLongConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>()Ljava/util/OptionalLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>()Ljava/util/OptionalLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>count</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>average</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>summaryStatistics</name>
                <desc>()Ljava/util/LongSummaryStatistics;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>anyMatch</name>
                <desc>(Ljava/util/function/LongPredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>allMatch</name>
                <desc>(Ljava/util/function/LongPredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>noneMatch</name>
                <desc>(Ljava/util/function/LongPredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findFirst</name>
                <desc>()Ljava/util/OptionalLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findAny</name>
                <desc>()Ljava/util/OptionalLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>asDoubleStream</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>boxed</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sequential</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallel</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/PrimitiveIterator$OfLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator$OfLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>builder</name>
                <desc>()Ljava/util/stream/LongStream$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(J)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>([J)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterate</name>
                <desc>(JLjava/util/function/LongUnaryOperator;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>generate</name>
                <desc>(Ljava/util/function/LongSupplier;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>range</name>
                <desc>(JJ)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>rangeClosed</name>
                <desc>(JJ)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>concat</name>
                <desc>
                    (Ljava/util/stream/LongStream;Ljava/util/stream/LongStream;)Ljava/util/stream/LongStream;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallel</name>
                <desc>()Ljava/util/stream/BaseStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sequential</name>
                <desc>()Ljava/util/stream/BaseStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.Stream</name>
        <fields></fields>
        <methods>
            <method>
                <name>filter</name>
                <desc>(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>map</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToInt</name>
                <desc>(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToLong</name>
                <desc>(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToDouble</name>
                <desc>(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMap</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMapToInt</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMapToLong</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMapToDouble</name>
                <desc>(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>distinct</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sorted</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sorted</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>peek</name>
                <desc>(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>limit</name>
                <desc>(J)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachOrdered</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>(Ljava/util/function/IntFunction;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>
                    (Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>collect</name>
                <desc>
                    (Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>collect</name>
                <desc>(Ljava/util/stream/Collector;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>min</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>(Ljava/util/Comparator;)Ljava/util/Optional;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>count</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>anyMatch</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>allMatch</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>noneMatch</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findFirst</name>
                <desc>()Ljava/util/Optional;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findAny</name>
                <desc>()Ljava/util/Optional;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>builder</name>
                <desc>()Ljava/util/stream/Stream$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(Ljava/lang/Object;)Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>([Ljava/lang/Object;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterate</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>generate</name>
                <desc>(Ljava/util/function/Supplier;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>concat</name>
                <desc>(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.Collector</name>
        <fields></fields>
        <methods>
            <method>
                <name>supplier</name>
                <desc>()Ljava/util/function/Supplier;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>accumulator</name>
                <desc>()Ljava/util/function/BiConsumer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>combiner</name>
                <desc>()Ljava/util/function/BinaryOperator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>finisher</name>
                <desc>()Ljava/util/function/Function;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>
                    (Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>
                    (Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;Ljava/util/function/Function;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.DoubleStream$Builder</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(D)Ljava/util/stream/DoubleStream$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>build</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.DoubleStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>filter</name>
                <desc>(Ljava/util/function/DoublePredicate;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>map</name>
                <desc>(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToObj</name>
                <desc>(Ljava/util/function/DoubleFunction;)Ljava/util/stream/Stream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToInt</name>
                <desc>(Ljava/util/function/DoubleToIntFunction;)Ljava/util/stream/IntStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapToLong</name>
                <desc>(Ljava/util/function/DoubleToLongFunction;)Ljava/util/stream/LongStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>flatMap</name>
                <desc>(Ljava/util/function/DoubleFunction;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>distinct</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sorted</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>peek</name>
                <desc>(Ljava/util/function/DoubleConsumer;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>limit</name>
                <desc>(J)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/DoubleConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEachOrdered</name>
                <desc>(Ljava/util/function/DoubleConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(DLjava/util/function/DoubleBinaryOperator;)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>reduce</name>
                <desc>(Ljava/util/function/DoubleBinaryOperator;)Ljava/util/OptionalDouble;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>collect</name>
                <desc>
                    (Ljava/util/function/Supplier;Ljava/util/function/ObjDoubleConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sum</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>min</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>max</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>count</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>average</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>summaryStatistics</name>
                <desc>()Ljava/util/DoubleSummaryStatistics;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>anyMatch</name>
                <desc>(Ljava/util/function/DoublePredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>allMatch</name>
                <desc>(Ljava/util/function/DoublePredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>noneMatch</name>
                <desc>(Ljava/util/function/DoublePredicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findFirst</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findAny</name>
                <desc>()Ljava/util/OptionalDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>boxed</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sequential</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallel</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/PrimitiveIterator$OfDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator$OfDouble;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>builder</name>
                <desc>()Ljava/util/stream/DoubleStream$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/stream/DoubleStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(D)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>([D)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterate</name>
                <desc>(DLjava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>generate</name>
                <desc>(Ljava/util/function/DoubleSupplier;)Ljava/util/stream/DoubleStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>concat</name>
                <desc>
                    (Ljava/util/stream/DoubleStream;Ljava/util/stream/DoubleStream;)Ljava/util/stream/DoubleStream;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallel</name>
                <desc>()Ljava/util/stream/BaseStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>sequential</name>
                <desc>()Ljava/util/stream/BaseStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.BaseStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isParallel</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>onClose</name>
                <desc>(Ljava/lang/Runnable;)Ljava/util/stream/BaseStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.LongStream$Builder</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(J)Ljava/util/stream/LongStream$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>build</name>
                <desc>()Ljava/util/stream/LongStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.stream.Collector$Characteristics</name>
        <fields>
            <field>
                <name>CONCURRENT</name>
                <desc>Ljava/util/stream/Collector$Characteristics;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNORDERED</name>
                <desc>Ljava/util/stream/Collector$Characteristics;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IDENTITY_FINISH</name>
                <desc>Ljava/util/stream/Collector$Characteristics;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Formatter$Flags</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$SingletonMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>values</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableSortedSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ss</name>
                <desc>Ljava/util/SortedSet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Scanner</name>
        <fields>
            <field>
                <name>BUFFER_SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WHITESPACE_PATTERN</name>
                <desc>Ljava/util/regex/Pattern;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FIND_ANY_PATTERN</name>
                <desc>Ljava/util/regex/Pattern;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NON_ASCII_DIGIT</name>
                <desc>Ljava/util/regex/Pattern;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>boolPattern</name>
                <desc>Ljava/util/regex/Pattern;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>BOOLEAN_PATTERN</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>separatorPattern</name>
                <desc>Ljava/util/regex/Pattern;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>linePattern</name>
                <desc>Ljava/util/regex/Pattern;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LINE_SEPARATOR_PATTERN</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LINE_PATTERN</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>boolPattern</name>
                <desc>()Ljava/util/regex/Pattern;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>separatorPattern</name>
                <desc>()Ljava/util/regex/Pattern;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>linePattern</name>
                <desc>()Ljava/util/regex/Pattern;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Readable;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toCharset</name>
                <desc>(Ljava/lang/String;)Ljava/nio/charset/Charset;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>makeReadable</name>
                <desc>(Ljava/io/InputStream;Ljava/nio/charset/Charset;)Ljava/lang/Readable;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toDecoder</name>
                <desc>(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>makeReadable</name>
                <desc>
                    (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/charset/CharsetDecoder;)Ljava/lang/Readable;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/nio/file/Path;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/nio/file/Path;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/nio/channels/ReadableByteChannel;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>makeReadable</name>
                <desc>(Ljava/nio/channels/ReadableByteChannel;)Ljava/lang/Readable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>delimiter</name>
                <desc>()Ljava/util/regex/Pattern;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useDelimiter</name>
                <desc>(Ljava/util/regex/Pattern;)Ljava/util/Scanner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>useDelimiter</name>
                <desc>(Ljava/lang/String;)Ljava/util/Scanner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>locale</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useLocale</name>
                <desc>(Ljava/util/Locale;)Ljava/util/Scanner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>radix</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>useRadix</name>
                <desc>(I)Ljava/util/Scanner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>match</name>
                <desc>()Ljava/util/regex/MatchResult;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>(Ljava/util/regex/Pattern;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>(Ljava/util/regex/Pattern;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextLine</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextLine</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findInLine</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findInLine</name>
                <desc>(Ljava/util/regex/Pattern;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findWithinHorizon</name>
                <desc>(Ljava/lang/String;I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>findWithinHorizon</name>
                <desc>(Ljava/util/regex/Pattern;I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(Ljava/util/regex/Pattern;)Ljava/util/Scanner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(Ljava/lang/String;)Ljava/util/Scanner;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextByte</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextByte</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextByte</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextByte</name>
                <desc>(I)B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextShort</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextShort</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextShort</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextShort</name>
                <desc>(I)S</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextInt</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextInt</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextInt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextLong</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextLong</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextLong</name>
                <desc>(I)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextFloat</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextFloat</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextDouble</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextBigInteger</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextBigInteger</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextBigInteger</name>
                <desc>()Ljava/math/BigInteger;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextBigInteger</name>
                <desc>(I)Ljava/math/BigInteger;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNextBigDecimal</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextBigDecimal</name>
                <desc>()Ljava/math/BigDecimal;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reset</name>
                <desc>()Ljava/util/Scanner;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle</name>
        <fields></fields>
        <methods>
            <method>
                <name>getString</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getStringArray</name>
                <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getObject</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLocale</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBundle</name>
                <desc>(Ljava/lang/String;)Ljava/util/ResourceBundle;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBundle</name>
                <desc>(Ljava/lang/String;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBundle</name>
                <desc>(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBundle</name>
                <desc>
                    (Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBundle</name>
                <desc>
                    (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBundle</name>
                <desc>
                    (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clearCache</name>
                <desc>(Ljava/lang/ClassLoader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getKeys</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Iterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Arrays$ArrayList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>a</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$Values</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$EmptyEnumeration</name>
        <fields>
            <field>
                <name>EMPTY_ENUMERATION</name>
                <desc>Ljava/util/Collections$EmptyEnumeration;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasMoreElements</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Observable</name>
        <fields></fields>
        <methods>
            <method>
                <name>addObserver</name>
                <desc>(Ljava/util/Observer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasChanged</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>countObservers</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$KeySet</name>
        <fields>
            <field>
                <name>m</name>
                <desc>Ljava/util/NavigableMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$NoFallbackControl</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.LongSummaryStatistics</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>accept</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>combine</name>
                <desc>(Ljava/util/LongSummaryStatistics;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCount</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSum</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMin</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMax</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAverage</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractCollection</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Observer</name>
        <fields></fields>
        <methods>
            <method>
                <name>update</name>
                <desc>(Ljava/util/Observable;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$EntryIterator$Entry</name>
        <fields></fields>
        <methods>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedHashIterator</name>
        <fields>
            <field>
                <name>next</name>
                <desc>Ljava/util/LinkedHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>current</name>
                <desc>Ljava/util/LinkedHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextNode</name>
                <desc>()Ljava/util/LinkedHashMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Stack</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>empty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>search</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>head</name>
                <desc>Ljava/util/LinkedHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tail</name>
                <desc>Ljava/util/LinkedHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>accessOrder</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>newNode</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;
                </desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replacementNode</name>
                <desc>(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>newTreeNode</name>
                <desc>
                    (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;
                </desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replacementTreeNode</name>
                <desc>(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>afterNodeRemoval</name>
                <desc>(Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>afterNodeInsertion</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>afterNodeAccess</name>
                <desc>(Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>internalWriteEntries</name>
                <desc>(Ljava/io/ObjectOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(IFZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeEldestEntry</name>
                <desc>(Ljava/util/Map$Entry;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableCollection</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>c</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$KeySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/TreeMap$KeySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getComparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Objects</name>
        <fields></fields>
        <methods>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>deepEquals</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hash</name>
                <desc>([Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compare</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isNull</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nonNull</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>requireNonNull</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$EntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.NavigableSet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$EmptyListIterator</name>
        <fields>
            <field>
                <name>EMPTY_ITERATOR</name>
                <desc>Ljava/util/Collections$EmptyListIterator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>hasPrevious</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>previousIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap</name>
        <fields>
            <field>
                <name>keyType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keyUniverse</name>
                <desc>[Ljava/lang/Enum;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>vals</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NULL</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ZERO_LENGTH_ENUM_ARRAY</name>
                <desc>[Ljava/lang/Enum;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/EnumMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/util/EnumMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getKeyUniverse</name>
                <desc>(Ljava/lang/Class;)[Ljava/lang/Enum;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$SingleFormatControl</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.HashMap$Node</name>
        <fields>
            <field>
                <name>hash</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>next</name>
                <desc>Ljava/util/HashMap$Node;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>m</name>
                <desc>Ljava/util/Map;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>mutex</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>keySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>values</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Set;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayList$ArrayListSpliterator</name>
        <fields>
            <field>
                <name>list</name>
                <desc>Ljava/util/ArrayList;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/ArrayList;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/ArrayList$ArrayListSpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Spliterator</name>
        <fields>
            <field>
                <name>ORDERED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DISTINCT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SORTED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIZED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NONNULL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IMMUTABLE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONCURRENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUBSIZED</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExactSizeIfKnown</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasCharacteristics</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getComparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedList$LLSpliterator</name>
        <fields>
            <field>
                <name>BATCH_UNIT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_BATCH</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>list</name>
                <desc>Ljava/util/LinkedList;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>current</name>
                <desc>Ljava/util/LinkedList$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>est</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>batch</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/LinkedList;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getEst</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Hashtable$Enumerator</name>
        <fields>
            <field>
                <name>table</name>
                <desc>[Ljava/util/Hashtable$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entry</name>
                <desc>Ljava/util/Hashtable$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastReturned</name>
                <desc>Ljava/util/Hashtable$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>type</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>iterator</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Hashtable;IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasMoreElements</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$CacheKeyReference</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.HashMap$ValueIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TimerTask</name>
        <fields></fields>
        <methods>
            <method>
                <name>cancel</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>scheduledExecutionTime</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$PrivateEntryIterator</name>
        <fields>
            <field>
                <name>next</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>lastReturned</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasNext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextEntry</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>prevEntry</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedList$Node</name>
        <fields>
            <field>
                <name>next</name>
                <desc>Ljava/util/LinkedList$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>prev</name>
                <desc>Ljava/util/LinkedList$Node;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/LinkedList$Node;Ljava/lang/Object;Ljava/util/LinkedList$Node;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedEntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractMap$SimpleEntry</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.JumboEnumSet</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$SubMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.SortedMap</name>
        <fields></fields>
        <methods>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$DescendingSubMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>reverseComparator</name>
                <desc>Ljava/util/Comparator;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;ZLjava/lang/Object;ZZLjava/lang/Object;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>3</param>
                    <param>4</param>
                    <param>6</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySpliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeyIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subLowest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subHighest</name>
                <desc>()Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subCeiling</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subHigher</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subFloor</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subLower</name>
                <desc>(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EnumMap$Values</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>list</name>
                <desc>Ljava/util/List;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EventListenerProxy</name>
        <fields></fields>
        <methods>
            <method>
                <name>getListener</name>
                <desc>()Ljava/util/EventListener;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PrimitiveIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Formatter$FormatString</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.JumboEnumSet$EnumSetIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Locale$LocaleNameGetter</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.SubList</name>
        <fields>
            <field>
                <name>l</name>
                <desc>Ljava/util/AbstractList;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>offset</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/AbstractList;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeRange</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$KeyIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$ValueSpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/WeakHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/WeakHashMap$ValueSpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TimerThread</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedMap$CheckedEntrySet</name>
        <fields>
            <field>
                <name>s</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>valueType</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Set;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/util/Map$Entry;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedEntry</name>
                <desc>
                    (Ljava/util/Map$Entry;Ljava/lang/Class;)Ljava/util/Collections$CheckedMap$CheckedEntrySet$CheckedEntry;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Set;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>entryConsumer</name>
                <desc>(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractList$ListItr</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/AbstractList;I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasPrevious</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>previousIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Formatter$Conversion</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.ListResourceBundle</name>
        <fields></fields>
        <methods>
            <method>
                <name>getKeys</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedEntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableNavigableSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_NAVIGABLE_SET</name>
                <desc>Ljava/util/NavigableSet;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ns</name>
                <desc>Ljava/util/NavigableSet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$LinkedKeyIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.ArrayDeque</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>offerFirst</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerLast</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeFirstOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeLastOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/util/ArrayDeque;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TaskQueue</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Locale$Builder</name>
        <fields>
            <field>
                <name>localeBuilder</name>
                <desc>Lsun/util/locale/InternalLocaleBuilder;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>setLocale</name>
                <desc>(Ljava/util/Locale;)Ljava/util/Locale$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLanguageTag</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLanguage</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setScript</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setRegion</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setVariant</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setExtension</name>
                <desc>(CLjava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setUnicodeLocaleKeyword</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addUnicodeLocaleAttribute</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeUnicodeLocaleAttribute</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale$Builder;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clear</name>
                <desc>()Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clearExtensions</name>
                <desc>()Ljava/util/Locale$Builder;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>build</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DEFAULT_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>EMPTY_ELEMENTDATA</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>elementData</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_ARRAY_SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ensureCapacity</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hugeCapacity</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>elementData</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeRange</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subListRangeCheck</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$ValueIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$Control$CandidateListCache</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$Entry</name>
        <fields>
            <field>
                <name>left</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>right</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>parent</name>
                <desc>Ljava/util/TreeMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>color</name>
                <desc>Z</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/TreeMap$Entry;)V</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Properties</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Properties;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setProperty</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>load</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>load</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>save</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>store</name>
                <desc>(Ljava/io/Writer;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>store</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>loadFromXML</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>storeToXML</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>storeToXML</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProperty</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getProperty</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>propertyNames</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stringPropertyNames</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>list</name>
                <desc>(Ljava/io/PrintStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>list</name>
                <desc>(Ljava/io/PrintWriter;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableRandomAccessList</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/List;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Formatter$FormatSpecifier</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.OptionalLong</name>
        <fields></fields>
        <methods>
            <method>
                <name>empty</name>
                <desc>()Ljava/util/OptionalLong;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>of</name>
                <desc>(J)Ljava/util/OptionalLong;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAsLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isPresent</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ifPresent</name>
                <desc>(Ljava/util/function/LongConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>orElse</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseGet</name>
                <desc>(Ljava/util/function/LongSupplier;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>orElseThrow</name>
                <desc>(Ljava/util/function/Supplier;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$KeySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Formatter$FormatSpecifier$BigDecimalLayout</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Locale</name>
        <fields>
            <field>
                <name>LOCALECACHE</name>
                <desc>Ljava/util/Locale$Cache;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ENGLISH</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FRENCH</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GERMAN</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ITALIAN</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JAPANESE</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KOREAN</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHINESE</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SIMPLIFIED_CHINESE</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TRADITIONAL_CHINESE</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FRANCE</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>GERMANY</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ITALY</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JAPAN</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>KOREA</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CHINA</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PRC</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TAIWAN</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UK</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>US</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CANADA</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CANADA_FRENCH</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ROOT</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PRIVATE_USE_EXTENSION</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNICODE_LOCALE_EXTENSION</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DISPLAY_LANGUAGE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DISPLAY_COUNTRY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DISPLAY_VARIANT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DISPLAY_SCRIPT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseLocale</name>
                <desc>Lsun/util/locale/BaseLocale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>localeExtensions</name>
                <desc>Lsun/util/locale/LocaleExtensions;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>hashCodeValue</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>defaultLocale</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>defaultDisplayLocale</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>defaultFormatLocale</name>
                <desc>Ljava/util/Locale;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>languageTag</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialPersistentFields</name>
                <desc>[Ljava/io/ObjectStreamField;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>isoLanguages</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>isoCountries</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>createConstant</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefault</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefault</name>
                <desc>(Ljava/util/Locale$Category;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>initDefault</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>initDefault</name>
                <desc>(Ljava/util/Locale$Category;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setDefault</name>
                <desc>(Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDefault</name>
                <desc>(Ljava/util/Locale$Category;Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAvailableLocales</name>
                <desc>()[Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getISOCountries</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getISOLanguages</name>
                <desc>()[Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getISO2Table</name>
                <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLanguage</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getScript</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCountry</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getVariant</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasExtensions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stripExtensions</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExtension</name>
                <desc>(C)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExtensionKeys</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUnicodeLocaleAttributes</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUnicodeLocaleType</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUnicodeLocaleKeys</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBaseLocale</name>
                <desc>()Lsun/util/locale/BaseLocale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toLanguageTag</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forLanguageTag</name>
                <desc>(Ljava/lang/String;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getISO3Language</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getISO3Country</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getISO3Code</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayLanguage</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayLanguage</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayScript</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayScript</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayCountry</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayCountry</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayVariant</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayVariant</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>(Ljava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>formatList</name>
                <desc>([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>composeList</name>
                <desc>(Ljava/text/MessageFormat;[Ljava/lang/String;)[Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUnicodeExtensionKey</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>convertOldISOCodes</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCompatibilityExtensions</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/LocaleExtensions;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>filter</name>
                <desc>
                    (Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>filter</name>
                <desc>(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>filterTags</name>
                <desc>
                    (Ljava/util/List;Ljava/util/Collection;Ljava/util/Locale$FilteringMode;)Ljava/util/List;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>filterTags</name>
                <desc>(Ljava/util/List;Ljava/util/Collection;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lookup</name>
                <desc>(Ljava/util/List;Ljava/util/Collection;)Ljava/util/Locale;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lookupTag</name>
                <desc>(Ljava/util/List;Ljava/util/Collection;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedCollection</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>c</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>type</name>
                <desc>Ljava/lang/Class;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>checkedCopyOf</name>
                <desc>(Ljava/util/Collection;)Ljava/util/Collection;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PropertyPermission</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>implies</name>
                <desc>(Ljava/security/Permission;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getActions</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newPermissionCollection</name>
                <desc>()Ljava/security/PermissionCollection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$EntrySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/HashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/HashMap$EntrySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.LinkedList</name>
        <fields>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>first</name>
                <desc>Ljava/util/LinkedList$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>last</name>
                <desc>Ljava/util/LinkedList$Node;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>linkBefore</name>
                <desc>(Ljava/lang/Object;Ljava/util/LinkedList$Node;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>unlink</name>
                <desc>(Ljava/util/LinkedList$Node;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>node</name>
                <desc>(I)Ljava/util/LinkedList$Node;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offer</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerFirst</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>offerLast</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeFirstOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeLastOccurrence</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$CheckedNavigableSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ns</name>
                <desc>Ljava/util/NavigableSet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableSet;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$DescendingKeyIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$KeySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/HashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/HashMap$KeySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedSortedSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ss</name>
                <desc>Ljava/util/SortedSet;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.AbstractList</name>
        <fields>
            <field>
                <name>modCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeRange</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap</name>
        <fields>
            <field>
                <name>DEFAULT_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MINIMUM_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAXIMUM_CAPACITY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>table</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>size</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>modCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NULL_KEY</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>entrySet</name>
                <desc>Ljava/util/Set;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>maskNull</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unmaskNull</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>capacity</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hash</name>
                <desc>(Ljava/lang/Object;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextKeyIndex</name>
                <desc>(II)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.HashMap$ValueSpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/HashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/HashMap$ValueSpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Set</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.StringTokenizer</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasMoreTokens</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextToken</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextToken</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hasMoreElements</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextElement</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>countTokens</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$ValueSpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/IdentityHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/IdentityHashMap$ValueSpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ResourceBundle$CacheKey</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$UnmodifiableNavigableMap$EmptyNavigableMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.RegularEnumSet$EnumSetIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.LinkedHashMap$Entry</name>
        <fields>
            <field>
                <name>before</name>
                <desc>Ljava/util/LinkedHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>after</name>
                <desc>Ljava/util/LinkedHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)V</desc>
                <params>
                    <param>0</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.RegularEnumSet</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.HashMap$EntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Formatter$DateTime</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.PriorityQueue$Itr</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Map</name>
        <fields></fields>
        <methods>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsKey</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsValue</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>putAll</name>
                <desc>(Ljava/util/Map;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>values</name>
                <desc>()Ljava/util/Collection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>entrySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOrDefault</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/BiConsumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/BiFunction;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replace</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>computeIfAbsent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>computeIfPresent</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>compute</name>
                <desc>(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>merge</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeMap$EntryIterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>next</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedCollection</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>c</name>
                <desc>Ljava/util/Collection;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>mutex</name>
                <desc>Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>stream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parallelStream</name>
                <desc>()Ljava/util/stream/Stream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Calendar</name>
        <fields>
            <field>
                <name>ERA</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>YEAR</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MONTH</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WEEK_OF_YEAR</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WEEK_OF_MONTH</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DATE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DAY_OF_MONTH</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DAY_OF_YEAR</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DAY_OF_WEEK</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DAY_OF_WEEK_IN_MONTH</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AM_PM</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HOUR</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HOUR_OF_DAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MINUTE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SECOND</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MILLISECOND</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ZONE_OFFSET</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DST_OFFSET</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FIELD_COUNT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUNDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MONDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TUESDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>WEDNESDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>THURSDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FRIDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SATURDAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JANUARY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FEBRUARY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MARCH</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>APRIL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JUNE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>JULY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AUGUST</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEPTEMBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>OCTOBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NOVEMBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DECEMBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>UNDECIMBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>AM</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PM</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ALL_STYLES</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SHORT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>LONG</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FIELD_NAME</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>getInstance</name>
                <desc>()Ljava/util/Calendar;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/util/TimeZone;)Ljava/util/Calendar;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/util/Locale;)Ljava/util/Calendar;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAvailableLocales</name>
                <desc>()[Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>()Ljava/util/Date;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTime</name>
                <desc>(Ljava/util/Date;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTimeInMillis</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setTimeInMillis</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(IIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(IIIIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clear</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isSet</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDisplayName</name>
                <desc>(IILjava/util/Locale;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDisplayNames</name>
                <desc>(IILjava/util/Locale;)Ljava/util/Map;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>before</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>after</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/util/Calendar;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>roll</name>
                <desc>(IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>roll</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setTimeZone</name>
                <desc>(Ljava/util/TimeZone;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTimeZone</name>
                <desc>()Ljava/util/TimeZone;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLenient</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isLenient</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setFirstDayOfWeek</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFirstDayOfWeek</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setMinimalDaysInFirstWeek</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getMinimalDaysInFirstWeek</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMinimum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaximum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getGreatestMinimum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLeastMaximum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getActualMinimum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getActualMaximum</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFieldName</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Timer</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>schedule</name>
                <desc>(Ljava/util/TimerTask;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>schedule</name>
                <desc>(Ljava/util/TimerTask;Ljava/util/Date;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>schedule</name>
                <desc>(Ljava/util/TimerTask;JJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>schedule</name>
                <desc>(Ljava/util/TimerTask;Ljava/util/Date;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>scheduleAtFixedRate</name>
                <desc>(Ljava/util/TimerTask;JJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>scheduleAtFixedRate</name>
                <desc>(Ljava/util/TimerTask;Ljava/util/Date;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>purge</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$EntrySet</name>
        <fields></fields>
        <methods>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>([Ljava/lang/Object;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.EventListener</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.TreeMap$DescendingKeySpliterator</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;III)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                    <param>5</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/TreeMap$DescendingKeySpliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEachRemaining</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>tryAdvance</name>
                <desc>(Ljava/util/function/Consumer;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>characteristics</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>trySplit</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.IdentityHashMap$KeyIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.util.Collections$SynchronizedNavigableMap</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nm</name>
                <desc>Ljava/util/NavigableMap;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableMap;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/NavigableMap;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lowerEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>floorEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>ceilingEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>higherEntry</name>
                <desc>(Ljava/lang/Object;)Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>firstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollFirstEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>pollLastEntry</name>
                <desc>()Ljava/util/Map$Entry;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingMap</name>
                <desc>()Ljava/util/NavigableMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>navigableKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingKeySet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedMap;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subMap</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailMap</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableMap;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>keySet</name>
                <desc>()Ljava/util/Set;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Locale$LanguageRange</name>
        <fields>
            <field>
                <name>MAX_WEIGHT</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MIN_WEIGHT</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>range</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>weight</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>hash</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;D)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isSubtagIllFormed</name>
                <desc>(Ljava/lang/String;Z)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRange</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getWeight</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;Ljava/util/Map;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mapEquivalents</name>
                <desc>(Ljava/util/List;Ljava/util/Map;)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.TreeSet</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/SortedSet;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingIterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>descendingSet</name>
                <desc>()Ljava/util/NavigableSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                    <param>3</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;Z)Ljava/util/NavigableSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>subSet</name>
                <desc>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>headSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tailSet</name>
                <desc>(Ljava/lang/Object;)Ljava/util/SortedSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>comparator</name>
                <desc>()Ljava/util/Comparator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.Vector</name>
        <fields>
            <field>
                <name>elementData</name>
                <desc>[Ljava/lang/Object;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>elementCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>capacityIncrement</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MAX_ARRAY_SIZE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Collection;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>copyInto</name>
                <desc>([Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ensureCapacity</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hugeCapacity</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setSize</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>capacity</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEmpty</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>elements</name>
                <desc>()Ljava/util/Enumeration;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>contains</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>indexOf</name>
                <desc>(Ljava/lang/Object;I)I</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastIndexOf</name>
                <desc>(Ljava/lang/Object;I)I</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>elementAt</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setElementAt</name>
                <desc>(Ljava/lang/Object;I)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeElementAt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>insertElementAt</name>
                <desc>(Ljava/lang/Object;I)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeElement</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toArray</name>
                <desc>()[Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>elementData</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>set</name>
                <desc>(ILjava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>add</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>remove</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>containsAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>retainAll</name>
                <desc>(Ljava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>addAll</name>
                <desc>(ILjava/util/Collection;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>subList</name>
                <desc>(II)Ljava/util/List;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>removeRange</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>(I)Ljava/util/ListIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>listIterator</name>
                <desc>()Ljava/util/ListIterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>iterator</name>
                <desc>()Ljava/util/Iterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>forEach</name>
                <desc>(Ljava/util/function/Consumer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>removeIf</name>
                <desc>(Ljava/util/function/Predicate;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>replaceAll</name>
                <desc>(Ljava/util/function/UnaryOperator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>sort</name>
                <desc>(Ljava/util/Comparator;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>spliterator</name>
                <desc>()Ljava/util/Spliterator;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.ArrayList$ListItr</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/ArrayList;I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>hasPrevious</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nextIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>previousIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.util.WeakHashMap$WeakHashMapSpliterator</name>
        <fields>
            <field>
                <name>map</name>
                <desc>Ljava/util/WeakHashMap;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>current</name>
                <desc>Ljava/util/WeakHashMap$Entry;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>index</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>fence</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>est</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>expectedModCount</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/WeakHashMap;IIII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFence</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>estimateSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.CharArrayReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.PipedReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PipedWriter;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PipedWriter;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/io/PipedWriter;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ExpiringCache$Entry</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$HandleTable$HandleList</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$BlockDataOutputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectStreamException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.Bits</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.BufferedInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$ClassDataSlot</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.FileDescriptor</name>
        <fields>
            <field>
                <name>in</name>
                <desc>Ljava/io/FileDescriptor;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>out</name>
                <desc>Ljava/io/FileDescriptor;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>err</name>
                <desc>Ljava/io/FileDescriptor;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>valid</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FileReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/FileDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.Console</name>
        <fields></fields>
        <methods>
            <method>
                <name>writer</name>
                <desc>()Ljava/io/PrintWriter;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>reader</name>
                <desc>()Ljava/io/Reader;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/Console;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>printf</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/Console;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readLine</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readPassword</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)[C</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FileInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/FileDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFD</name>
                <desc>()Ljava/io/FileDescriptor;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChannel</name>
                <desc>()Ljava/nio/channels/FileChannel;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.RandomAccessFile</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFD</name>
                <desc>()Ljava/io/FileDescriptor;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChannel</name>
                <desc>()Ljava/nio/channels/FileChannel;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>skipBytes</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFilePointer</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>seek</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLength</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readByte</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedByte</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readShort</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedShort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readChar</name>
                <desc>()C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFloat</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUTF</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>writeBoolean</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeByte</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeShort</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeInt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeLong</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeFloat</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeDouble</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBytes</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChars</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeUTF</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.BufferedReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$Caches</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.StringReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$DebugTraceInfoStack</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$GetField</name>
        <fields></fields>
        <methods>
            <method>
                <name>getObjectStreamClass</name>
                <desc>()Ljava/io/ObjectStreamClass;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>defaulted</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;Z)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;B)B</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;C)C</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;S)S</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;I)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;J)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;F)F</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;D)D</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>get</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$HandleTable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectInputValidation</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.PipedInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PipedOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PipedOutputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/io/PipedOutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.OutputStreamWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Ljava/nio/charset/CharsetEncoder;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$ValidationList</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.PipedOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PipedInputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/io/PipedInputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$PutFieldImpl</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$FieldReflectorKey</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.FilterWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamConstants</name>
        <fields>
            <field>
                <name>STREAM_MAGIC</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>STREAM_VERSION</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_BASE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_NULL</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_REFERENCE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_CLASSDESC</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_OBJECT</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_STRING</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_ARRAY</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_CLASS</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_BLOCKDATA</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_ENDBLOCKDATA</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_RESET</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_BLOCKDATALONG</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_EXCEPTION</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_LONGSTRING</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_PROXYCLASSDESC</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_ENUM</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TC_MAX</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>baseWireHandle</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SC_WRITE_METHOD</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SC_BLOCK_DATA</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SC_SERIALIZABLE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SC_EXTERNALIZABLE</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SC_ENUM</name>
                <desc>B</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUBSTITUTION_PERMISSION</name>
                <desc>Ljava/io/SerializablePermission;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SUBCLASS_IMPLEMENTATION_PERMISSION</name>
                <desc>Ljava/io/SerializablePermission;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PROTOCOL_VERSION_1</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PROTOCOL_VERSION_2</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.Closeable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.BufferedWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Writer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Writer;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.PushbackReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unread</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>unread</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>unread</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.PrintStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;ZLjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkError</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>printf</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>printf</name>
                <desc>(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</desc>
                <params>
                    <param>2</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</desc>
                <params>
                    <param>2</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/PrintStream;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/PrintStream;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/PrintStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$EntryFuture</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.Serializable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.FilePermission</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>implies</name>
                <desc>(Ljava/security/Permission;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getActions</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>newPermissionCollection</name>
                <desc>()Ljava/security/PermissionCollection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FileWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/FileDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$ReplaceTable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.DataOutput</name>
        <fields></fields>
        <methods>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBoolean</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeByte</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeShort</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeInt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeLong</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeFloat</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeDouble</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBytes</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChars</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeUTF</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ByteArrayInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FilterInputStream</name>
        <fields>
            <field>
                <name>in</name>
                <desc>Ljava/io/InputStream;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.BufferedOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$PutField</name>
        <fields></fields>
        <methods>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;B)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;C)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;S)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;F)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;D)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>put</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/io/ObjectOutput;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.File</name>
        <fields>
            <field>
                <name>separatorChar</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>separator</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>pathSeparatorChar</name>
                <desc>C</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>pathSeparator</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)V</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/net/URI;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPath</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAbsolute</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAbsolutePath</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAbsoluteFile</name>
                <desc>()Ljava/io/File;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCanonicalPath</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCanonicalFile</name>
                <desc>()Ljava/io/File;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toURL</name>
                <desc>()Ljava/net/URL;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toURI</name>
                <desc>()Ljava/net/URI;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>canRead</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>canWrite</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>exists</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isDirectory</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isFile</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isHidden</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lastModified</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>length</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>createNewFile</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>delete</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mkdir</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mkdirs</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>renameTo</name>
                <desc>(Ljava/io/File;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLastModified</name>
                <desc>(J)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setReadOnly</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setWritable</name>
                <desc>(ZZ)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setWritable</name>
                <desc>(Z)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setReadable</name>
                <desc>(ZZ)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setReadable</name>
                <desc>(Z)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setExecutable</name>
                <desc>(ZZ)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setExecutable</name>
                <desc>(Z)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>canExecute</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTotalSpace</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFreeSpace</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUsableSpace</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>createTempFile</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>createTempFile</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/io/File;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.StreamTokenizer</name>
        <fields>
            <field>
                <name>ttype</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TT_EOF</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TT_EOL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TT_NUMBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TT_WORD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>nval</name>
                <desc>D</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>wordChars</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>whitespaceChars</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ordinaryChars</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>ordinaryChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>commentChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>quoteChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>eolIsSignificant</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>slashStarComments</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>slashSlashComments</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lowerCaseMode</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>nextToken</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>lineno</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.InvalidObjectException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.LineNumberReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Reader;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setLineNumber</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLineNumber</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.SequenceInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/util/Enumeration;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ByteArrayOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeTo</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toByteArray</name>
                <desc>()[B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream$HandleTable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$ValidationList$Callback</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.FilenameFilter</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$BlockDataInputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$GetFieldImpl</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ExpiringCache</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.File$TempDirectory</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectInput</name>
        <fields></fields>
        <methods>
            <method>
                <name>readObject</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FileFilter</name>
        <fields></fields>
        <methods>
            <method>
                <name>accept</name>
                <desc>(Ljava/io/File;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$MemberSignature</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.FileSystem</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.CharArrayWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeTo</name>
                <desc>(Ljava/io/Writer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/CharArrayWriter;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/CharArrayWriter;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/CharArrayWriter;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toCharArray</name>
                <desc>()[C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/Writer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/Writer;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/Writer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass</name>
        <fields>
            <field>
                <name>NO_FIELDS</name>
                <desc>[Ljava/io/ObjectStreamField;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>lookup</name>
                <desc>(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>lookupAny</name>
                <desc>(Ljava/lang/Class;)Ljava/io/ObjectStreamClass;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSerialVersionUID</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFields</name>
                <desc>()[Ljava/io/ObjectStreamField;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getField</name>
                <desc>(Ljava/lang/String;)Ljava/io/ObjectStreamField;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.StringWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/StringWriter;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/StringWriter;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBuffer</name>
                <desc>()Ljava/lang/StringBuffer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/Writer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/Writer;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/Writer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.InputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([B)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FilterReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.DataOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBoolean</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeByte</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeShort</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeInt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeLong</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeFloat</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeDouble</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBytes</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChars</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeUTF</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$ExceptionInfo</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>useProtocolVersion</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>putFields</name>
                <desc>()Ljava/io/ObjectOutputStream$PutField;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBoolean</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeByte</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeShort</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChar</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeInt</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeLong</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeFloat</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeDouble</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeBytes</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeChars</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>writeUTF</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectOutput</name>
        <fields></fields>
        <methods>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readObject</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnshared</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFields</name>
                <desc>()Ljava/io/ObjectInputStream$GetField;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>registerValidation</name>
                <desc>(Ljava/io/ObjectInputValidation;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readByte</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedByte</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readChar</name>
                <desc>()C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readShort</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedShort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFloat</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>skipBytes</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUTF</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.LineNumberInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>setLineNumber</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLineNumber</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.Externalizable</name>
        <fields></fields>
        <methods>
            <method>
                <name>writeExternal</name>
                <desc>(Ljava/io/ObjectOutput;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readExternal</name>
                <desc>(Ljava/io/ObjectInput;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.PrintWriter</name>
        <fields>
            <field>
                <name>out</name>
                <desc>Ljava/io/Writer;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Writer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/Writer;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/OutputStream;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>checkError</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>print</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(J)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(F)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>(D)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>println</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>printf</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>printf</name>
                <desc>(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;</desc>
                <params>
                    <param>2</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;</desc>
                <params>
                    <param>2</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/PrintWriter;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/Writer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/Writer;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/Writer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.Writer</name>
        <fields></fields>
        <methods>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([C)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/lang/String;II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/io/Writer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/io/Writer;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/io/Writer;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(C)Ljava/lang/Appendable;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;</desc>
                <params>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>append</name>
                <desc>(Ljava/lang/CharSequence;)Ljava/lang/Appendable;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.PipedWriter</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/PipedReader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>connect</name>
                <desc>(Ljava/io/PipedReader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([CII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$Caches</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.SerializablePermission</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FilterOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$Caches</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectStreamField</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Class;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/lang/Class;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getType</name>
                <desc>()Ljava/lang/Class;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTypeCode</name>
                <desc>()C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getOffset</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isPrimitive</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isUnshared</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>compareTo</name>
                <desc>(Ljava/lang/Object;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.PushbackInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>unread</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>unread</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>unread</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.DataInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([B)I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>skipBytes</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readByte</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedByte</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readShort</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedShort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readChar</name>
                <desc>()C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFloat</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUTF</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUTF</name>
                <desc>(Ljava/io/DataInput;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$WeakClassKey</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.ObjectStreamClass$FieldReflector</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.DataInput</name>
        <fields></fields>
        <methods>
            <method>
                <name>readFully</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readFully</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>skipBytes</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>readBoolean</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readByte</name>
                <desc>()B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedByte</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readShort</name>
                <desc>()S</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUnsignedShort</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readChar</name>
                <desc>()C</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readInt</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readLong</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readFloat</name>
                <desc>()F</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readDouble</name>
                <desc>()D</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>readUTF</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.Reader</name>
        <fields></fields>
        <methods>
            <method>
                <name>read</name>
                <desc>(Ljava/nio/CharBuffer;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([C)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>markSupported</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>mark</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FilePermissionCollection</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.InputStreamReader</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/InputStream;Ljava/nio/charset/CharsetDecoder;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([CII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ready</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.FileOutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/File;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/io/FileDescriptor;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFD</name>
                <desc>()Ljava/io/FileDescriptor;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getChannel</name>
                <desc>()Ljava/nio/channels/FileChannel;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.ObjectInputStream$PeekInputStream</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.StringBufferInputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>read</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>skip</name>
                <desc>(J)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>available</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.io.Console$LineReader</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.IOException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.Flushable</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.io.OutputStream</name>
        <fields></fields>
        <methods>
            <method>
                <name>write</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.awt.image.ColorModel</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.sql.ResultSet</name>
        <fields>
            <field>
                <name>FETCH_FORWARD</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FETCH_REVERSE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>FETCH_UNKNOWN</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_FORWARD_ONLY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_SCROLL_INSENSITIVE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_SCROLL_SENSITIVE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONCUR_READ_ONLY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CONCUR_UPDATABLE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>HOLD_CURSORS_OVER_COMMIT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>CLOSE_CURSORS_AT_COMMIT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>next</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>wasNull</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBoolean</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getByte</name>
                <desc>(I)B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getShort</name>
                <desc>(I)S</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInt</name>
                <desc>(I)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLong</name>
                <desc>(I)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFloat</name>
                <desc>(I)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDouble</name>
                <desc>(I)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBigDecimal</name>
                <desc>(II)Ljava/math/BigDecimal;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBytes</name>
                <desc>(I)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDate</name>
                <desc>(I)Ljava/sql/Date;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>(I)Ljava/sql/Time;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTimestamp</name>
                <desc>(I)Ljava/sql/Timestamp;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAsciiStream</name>
                <desc>(I)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getUnicodeStream</name>
                <desc>(I)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBinaryStream</name>
                <desc>(I)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getString</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBoolean</name>
                <desc>(Ljava/lang/String;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getByte</name>
                <desc>(Ljava/lang/String;)B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getShort</name>
                <desc>(Ljava/lang/String;)S</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInt</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getLong</name>
                <desc>(Ljava/lang/String;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFloat</name>
                <desc>(Ljava/lang/String;)F</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDouble</name>
                <desc>(Ljava/lang/String;)D</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBigDecimal</name>
                <desc>(Ljava/lang/String;I)Ljava/math/BigDecimal;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBytes</name>
                <desc>(Ljava/lang/String;)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDate</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Date;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Time;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTimestamp</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Timestamp;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getAsciiStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getUnicodeStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBinaryStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/InputStream;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCursorName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMetaData</name>
                <desc>()Ljava/sql/ResultSetMetaData;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getObject</name>
                <desc>(I)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getObject</name>
                <desc>(Ljava/lang/String;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>findColumn</name>
                <desc>(Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCharacterStream</name>
                <desc>(I)Ljava/io/Reader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getCharacterStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/Reader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBigDecimal</name>
                <desc>(I)Ljava/math/BigDecimal;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getBigDecimal</name>
                <desc>(Ljava/lang/String;)Ljava/math/BigDecimal;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>isBeforeFirst</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isAfterLast</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isFirst</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isLast</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>first</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>last</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRow</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>absolute</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>relative</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>previous</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setFetchDirection</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFetchDirection</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setFetchSize</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFetchSize</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getType</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getConcurrency</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>rowUpdated</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>rowInserted</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>rowDeleted</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>updateNull</name>
                <desc>(I)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBoolean</name>
                <desc>(IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateByte</name>
                <desc>(IB)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateShort</name>
                <desc>(IS)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateInt</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateLong</name>
                <desc>(IJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateFloat</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateDouble</name>
                <desc>(ID)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBigDecimal</name>
                <desc>(ILjava/math/BigDecimal;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateString</name>
                <desc>(ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBytes</name>
                <desc>(I[B)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateDate</name>
                <desc>(ILjava/sql/Date;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateTime</name>
                <desc>(ILjava/sql/Time;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateTimestamp</name>
                <desc>(ILjava/sql/Timestamp;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateAsciiStream</name>
                <desc>(ILjava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBinaryStream</name>
                <desc>(ILjava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateCharacterStream</name>
                <desc>(ILjava/io/Reader;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(ILjava/lang/Object;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNull</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBoolean</name>
                <desc>(Ljava/lang/String;Z)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateByte</name>
                <desc>(Ljava/lang/String;B)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateShort</name>
                <desc>(Ljava/lang/String;S)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateInt</name>
                <desc>(Ljava/lang/String;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateLong</name>
                <desc>(Ljava/lang/String;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateFloat</name>
                <desc>(Ljava/lang/String;F)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateDouble</name>
                <desc>(Ljava/lang/String;D)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBigDecimal</name>
                <desc>(Ljava/lang/String;Ljava/math/BigDecimal;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateString</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBytes</name>
                <desc>(Ljava/lang/String;[B)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateDate</name>
                <desc>(Ljava/lang/String;Ljava/sql/Date;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateTime</name>
                <desc>(Ljava/lang/String;Ljava/sql/Time;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateTimestamp</name>
                <desc>(Ljava/lang/String;Ljava/sql/Timestamp;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateAsciiStream</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBinaryStream</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateCharacterStream</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getObject</name>
                <desc>(ILjava/util/Map;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRef</name>
                <desc>(I)Ljava/sql/Ref;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBlob</name>
                <desc>(I)Ljava/sql/Blob;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClob</name>
                <desc>(I)Ljava/sql/Clob;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getArray</name>
                <desc>(I)Ljava/sql/Array;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRef</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Ref;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBlob</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Blob;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClob</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Clob;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getArray</name>
                <desc>(Ljava/lang/String;)Ljava/sql/Array;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDate</name>
                <desc>(ILjava/util/Calendar;)Ljava/sql/Date;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getDate</name>
                <desc>(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>(ILjava/util/Calendar;)Ljava/sql/Time;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTime</name>
                <desc>(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTimestamp</name>
                <desc>(ILjava/util/Calendar;)Ljava/sql/Timestamp;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getTimestamp</name>
                <desc>(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getURL</name>
                <desc>(I)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getURL</name>
                <desc>(Ljava/lang/String;)Ljava/net/URL;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateRef</name>
                <desc>(ILjava/sql/Ref;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateRef</name>
                <desc>(Ljava/lang/String;Ljava/sql/Ref;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBlob</name>
                <desc>(ILjava/sql/Blob;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBlob</name>
                <desc>(Ljava/lang/String;Ljava/sql/Blob;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateClob</name>
                <desc>(ILjava/sql/Clob;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateClob</name>
                <desc>(Ljava/lang/String;Ljava/sql/Clob;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateArray</name>
                <desc>(ILjava/sql/Array;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateArray</name>
                <desc>(Ljava/lang/String;Ljava/sql/Array;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRowId</name>
                <desc>(I)Ljava/sql/RowId;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getRowId</name>
                <desc>(Ljava/lang/String;)Ljava/sql/RowId;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateRowId</name>
                <desc>(ILjava/sql/RowId;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateRowId</name>
                <desc>(Ljava/lang/String;Ljava/sql/RowId;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getHoldability</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isClosed</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>updateNString</name>
                <desc>(ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNString</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNClob</name>
                <desc>(ILjava/sql/NClob;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNClob</name>
                <desc>(Ljava/lang/String;Ljava/sql/NClob;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNClob</name>
                <desc>(I)Ljava/sql/NClob;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNClob</name>
                <desc>(Ljava/lang/String;)Ljava/sql/NClob;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSQLXML</name>
                <desc>(I)Ljava/sql/SQLXML;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSQLXML</name>
                <desc>(Ljava/lang/String;)Ljava/sql/SQLXML;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>updateSQLXML</name>
                <desc>(ILjava/sql/SQLXML;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateSQLXML</name>
                <desc>(Ljava/lang/String;Ljava/sql/SQLXML;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNString</name>
                <desc>(I)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNString</name>
                <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNCharacterStream</name>
                <desc>(I)Ljava/io/Reader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getNCharacterStream</name>
                <desc>(Ljava/lang/String;)Ljava/io/Reader;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNCharacterStream</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNCharacterStream</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateAsciiStream</name>
                <desc>(ILjava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBinaryStream</name>
                <desc>(ILjava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateCharacterStream</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateAsciiStream</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBinaryStream</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateCharacterStream</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBlob</name>
                <desc>(ILjava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBlob</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateClob</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateClob</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNClob</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNClob</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNCharacterStream</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNCharacterStream</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateAsciiStream</name>
                <desc>(ILjava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBinaryStream</name>
                <desc>(ILjava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateCharacterStream</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateAsciiStream</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBinaryStream</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateCharacterStream</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBlob</name>
                <desc>(ILjava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateBlob</name>
                <desc>(Ljava/lang/String;Ljava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateClob</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateClob</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNClob</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateNClob</name>
                <desc>(Ljava/lang/String;Ljava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getObject</name>
                <desc>(ILjava/lang/Class;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getObject</name>
                <desc>(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(ILjava/lang/Object;Ljava/sql/SQLType;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;Ljava/sql/SQLType;I)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(ILjava/lang/Object;Ljava/sql/SQLType;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>updateObject</name>
                <desc>(Ljava/lang/String;Ljava/lang/Object;Ljava/sql/SQLType;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.sql.DatabaseMetaData</name>
        <fields>
            <field>
                <name>procedureResultUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureNoResult</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureReturnsResult</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureColumnUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureColumnIn</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureColumnInOut</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureColumnOut</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureColumnReturn</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureColumnResult</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureNoNulls</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureNullable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>procedureNullableUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>columnNoNulls</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>columnNullable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>columnNullableUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>bestRowTemporary</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>bestRowTransaction</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>bestRowSession</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>bestRowUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>bestRowNotPseudo</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>bestRowPseudo</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>versionColumnUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>versionColumnNotPseudo</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>versionColumnPseudo</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeyCascade</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeyRestrict</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeySetNull</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeyNoAction</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeySetDefault</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeyInitiallyDeferred</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeyInitiallyImmediate</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>importedKeyNotDeferrable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typeNoNulls</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typeNullable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typeNullableUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typePredNone</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typePredChar</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typePredBasic</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>typeSearchable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tableIndexStatistic</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tableIndexClustered</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tableIndexHashed</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>tableIndexOther</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>attributeNoNulls</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>attributeNullable</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>attributeNullableUnknown</name>
                <desc>S</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sqlStateXOpen</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sqlStateSQL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>sqlStateSQL99</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionColumnUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionColumnIn</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionColumnInOut</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionColumnOut</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionReturn</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionColumnResult</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionNoNulls</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionNullable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionNullableUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionResultUnknown</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionNoTable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>functionReturnsTable</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>allProceduresAreCallable</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>allTablesAreSelectable</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUserName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isReadOnly</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullsAreSortedHigh</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullsAreSortedLow</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullsAreSortedAtStart</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullsAreSortedAtEnd</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDatabaseProductName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDatabaseProductVersion</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDriverName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDriverVersion</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDriverMajorVersion</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDriverMinorVersion</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>usesLocalFiles</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>usesLocalFilePerTable</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsMixedCaseIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>storesUpperCaseIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>storesLowerCaseIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>storesMixedCaseIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsMixedCaseQuotedIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>storesUpperCaseQuotedIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>storesLowerCaseQuotedIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>storesMixedCaseQuotedIdentifiers</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getIdentifierQuoteString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSQLKeywords</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getNumericFunctions</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getStringFunctions</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSystemFunctions</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTimeDateFunctions</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSearchStringEscape</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExtraNameCharacters</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsAlterTableWithAddColumn</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsAlterTableWithDropColumn</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsColumnAliasing</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>nullPlusNonNullIsNull</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsConvert</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsConvert</name>
                <desc>(II)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsTableCorrelationNames</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsDifferentTableCorrelationNames</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsExpressionsInOrderBy</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsOrderByUnrelated</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsGroupBy</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsGroupByUnrelated</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsGroupByBeyondSelect</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsLikeEscapeClause</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsMultipleResultSets</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsMultipleTransactions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsNonNullableColumns</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsMinimumSQLGrammar</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCoreSQLGrammar</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsExtendedSQLGrammar</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsANSI92EntryLevelSQL</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsANSI92IntermediateSQL</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsANSI92FullSQL</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsIntegrityEnhancementFacility</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsOuterJoins</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsFullOuterJoins</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsLimitedOuterJoins</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSchemaTerm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProcedureTerm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCatalogTerm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isCatalogAtStart</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCatalogSeparator</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSchemasInDataManipulation</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSchemasInProcedureCalls</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSchemasInTableDefinitions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSchemasInIndexDefinitions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSchemasInPrivilegeDefinitions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCatalogsInDataManipulation</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCatalogsInProcedureCalls</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCatalogsInTableDefinitions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCatalogsInIndexDefinitions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCatalogsInPrivilegeDefinitions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsPositionedDelete</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsPositionedUpdate</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSelectForUpdate</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsStoredProcedures</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSubqueriesInComparisons</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSubqueriesInExists</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSubqueriesInIns</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSubqueriesInQuantifieds</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsCorrelatedSubqueries</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsUnion</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsUnionAll</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsOpenCursorsAcrossCommit</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsOpenCursorsAcrossRollback</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsOpenStatementsAcrossCommit</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsOpenStatementsAcrossRollback</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxBinaryLiteralLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxCharLiteralLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxColumnNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxColumnsInGroupBy</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxColumnsInIndex</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxColumnsInOrderBy</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxColumnsInSelect</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxColumnsInTable</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxConnections</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxCursorNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxIndexLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxSchemaNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxProcedureNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxCatalogNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxRowSize</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>doesMaxRowSizeIncludeBlobs</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxStatementLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxStatements</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxTableNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxTablesInSelect</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxUserNameLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDefaultTransactionIsolation</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsTransactions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsTransactionIsolationLevel</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsDataDefinitionAndDataManipulationTransactions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsDataManipulationTransactionsOnly</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>dataDefinitionCausesTransactionCommit</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>dataDefinitionIgnoredInTransactions</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProcedures</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProcedureColumns</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTables</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSchemas</name>
                <desc>()Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCatalogs</name>
                <desc>()Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTableTypes</name>
                <desc>()Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getColumns</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getColumnPrivileges</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTablePrivileges</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getBestRowIdentifier</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getVersionColumns</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPrimaryKeys</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getImportedKeys</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getExportedKeys</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getCrossReference</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params>
                    <param>2</param>
                    <param>5</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getTypeInfo</name>
                <desc>()Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getIndexInfo</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>2</param>
                    <param>3</param>
                    <param>4</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsResultSetType</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsResultSetConcurrency</name>
                <desc>(II)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ownUpdatesAreVisible</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ownDeletesAreVisible</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>ownInsertsAreVisible</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>othersUpdatesAreVisible</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>othersDeletesAreVisible</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>othersInsertsAreVisible</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>updatesAreDetected</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>deletesAreDetected</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>insertsAreDetected</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsBatchUpdates</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getUDTs</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getConnection</name>
                <desc>()Ljava/sql/Connection;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsSavepoints</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsNamedParameters</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsMultipleOpenResults</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsGetGeneratedKeys</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSuperTypes</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSuperTables</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAttributes</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsResultSetHoldability</name>
                <desc>(I)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getResultSetHoldability</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDatabaseMajorVersion</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDatabaseMinorVersion</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getJDBCMajorVersion</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getJDBCMinorVersion</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSQLStateType</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>locatorsUpdateCopy</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsStatementPooling</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getRowIdLifetime</name>
                <desc>()Ljava/sql/RowIdLifetime;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getSchemas</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsStoredFunctionsUsingCallSyntax</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>autoCommitFailureClosesAllResultSets</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getClientInfoProperties</name>
                <desc>()Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFunctions</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFunctionColumns</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getPseudoColumns</name>
                <desc>
                    (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;
                </desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>generatedKeyAlwaysReturned</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getMaxLogicalLobSize</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>supportsRefCursors</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.sql.SQLType</name>
        <fields></fields>
        <methods>
            <method>
                <name>getName</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getVendor</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getVendorTypeNumber</name>
                <desc>()Ljava/lang/Integer;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.sql.PreparedStatement</name>
        <fields></fields>
        <methods>
            <method>
                <name>executeQuery</name>
                <desc>()Ljava/sql/ResultSet;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>executeUpdate</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setNull</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBoolean</name>
                <desc>(IZ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setByte</name>
                <desc>(IB)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setShort</name>
                <desc>(IS)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setInt</name>
                <desc>(II)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setLong</name>
                <desc>(IJ)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setFloat</name>
                <desc>(IF)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDouble</name>
                <desc>(ID)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBigDecimal</name>
                <desc>(ILjava/math/BigDecimal;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setString</name>
                <desc>(ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBytes</name>
                <desc>(I[B)V</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDate</name>
                <desc>(ILjava/sql/Date;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setTime</name>
                <desc>(ILjava/sql/Time;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setTimestamp</name>
                <desc>(ILjava/sql/Timestamp;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAsciiStream</name>
                <desc>(ILjava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setUnicodeStream</name>
                <desc>(ILjava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBinaryStream</name>
                <desc>(ILjava/io/InputStream;I)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setObject</name>
                <desc>(ILjava/lang/Object;I)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setObject</name>
                <desc>(ILjava/lang/Object;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>execute</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setCharacterStream</name>
                <desc>(ILjava/io/Reader;I)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setRef</name>
                <desc>(ILjava/sql/Ref;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBlob</name>
                <desc>(ILjava/sql/Blob;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setClob</name>
                <desc>(ILjava/sql/Clob;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setArray</name>
                <desc>(ILjava/sql/Array;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setDate</name>
                <desc>(ILjava/sql/Date;Ljava/util/Calendar;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setTime</name>
                <desc>(ILjava/sql/Time;Ljava/util/Calendar;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setTimestamp</name>
                <desc>(ILjava/sql/Timestamp;Ljava/util/Calendar;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNull</name>
                <desc>(IILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setURL</name>
                <desc>(ILjava/net/URL;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getParameterMetaData</name>
                <desc>()Ljava/sql/ParameterMetaData;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setRowId</name>
                <desc>(ILjava/sql/RowId;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNString</name>
                <desc>(ILjava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNCharacterStream</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNClob</name>
                <desc>(ILjava/sql/NClob;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setClob</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBlob</name>
                <desc>(ILjava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNClob</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setSQLXML</name>
                <desc>(ILjava/sql/SQLXML;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setObject</name>
                <desc>(ILjava/lang/Object;II)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAsciiStream</name>
                <desc>(ILjava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBinaryStream</name>
                <desc>(ILjava/io/InputStream;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setCharacterStream</name>
                <desc>(ILjava/io/Reader;J)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setAsciiStream</name>
                <desc>(ILjava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBinaryStream</name>
                <desc>(ILjava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setCharacterStream</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNCharacterStream</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setClob</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setBlob</name>
                <desc>(ILjava/io/InputStream;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setNClob</name>
                <desc>(ILjava/io/Reader;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setObject</name>
                <desc>(ILjava/lang/Object;Ljava/sql/SQLType;I)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setObject</name>
                <desc>(ILjava/lang/Object;Ljava/sql/SQLType;)V</desc>
                <params>
                    <param>0</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>executeLargeUpdate</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.security.MessageDigest$Delegate</name>
        <fields></fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/security/MessageDigestSpi;Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>engineGetDigestLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>engineUpdate</name>
                <desc>(B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>engineUpdate</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>engineUpdate</name>
                <desc>(Ljava/nio/ByteBuffer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>engineDigest</name>
                <desc>()[B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>engineDigest</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.security.MessageDigest</name>
        <fields>
            <field>
                <name>INITIAL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>IN_PROGRESS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;)Ljava/security/MessageDigest;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/lang/String;)Ljava/security/MessageDigest;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getInstance</name>
                <desc>(Ljava/lang/String;Ljava/security/Provider;)Ljava/security/MessageDigest;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getProvider</name>
                <desc>()Ljava/security/Provider;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>update</name>
                <desc>(B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>update</name>
                <desc>([BII)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>update</name>
                <desc>([B)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>update</name>
                <desc>(Ljava/nio/ByteBuffer;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>digest</name>
                <desc>()[B</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>digest</name>
                <desc>([BII)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>digest</name>
                <desc>([B)[B</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>isEqual</name>
                <desc>([B[B)Z</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>getAlgorithm</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getDigestLength</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.security.ProtectionDomain</name>
        <fields>
            <field>
                <name>key</name>
                <desc>Ljava/security/ProtectionDomain$Key;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>debug</name>
                <desc>Lsun/security/util/Debug;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>
                    (Ljava/security/CodeSource;Ljava/security/PermissionCollection;Ljava/lang/ClassLoader;[Ljava/security/Principal;)V
                </desc>
                <params>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getPrincipals</name>
                <desc>()[Ljava/security/Principal;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>implies</name>
                <desc>(Ljava/security/Permission;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>impliesCreateAccessControlContext</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>seeAllp</name>
                <desc>()Z</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.security.ProtectionDomain$Key</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.text.MessageFormat</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>INITIAL_FORMATS</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEG_RAW</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEG_INDEX</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEG_TYPE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>SEG_MODIFIER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_NULL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_NUMBER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_DATE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_TIME</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_CHOICE</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>TYPE_KEYWORDS</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_DEFAULT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_CURRENCY</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_PERCENT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_INTEGER</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>NUMBER_MODIFIER_KEYWORDS</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_SHORT</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_MEDIUM</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_LONG</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>MODIFIER_FULL</name>
                <desc>I</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DATE_TIME_MODIFIER_KEYWORDS</name>
                <desc>[Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>DATE_TIME_MODIFIERS</name>
                <desc>[I</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setLocale</name>
                <desc>(Ljava/util/Locale;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getLocale</name>
                <desc>()Ljava/util/Locale;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>applyPattern</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>toPattern</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>setFormatsByArgumentIndex</name>
                <desc>([Ljava/text/Format;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setFormats</name>
                <desc>([Ljava/text/Format;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setFormatByArgumentIndex</name>
                <desc>(ILjava/text/Format;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>setFormat</name>
                <desc>(ILjava/text/Format;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>getFormatsByArgumentIndex</name>
                <desc>()[Ljava/text/Format;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>getFormats</name>
                <desc>()[Ljava/text/Format;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>
                    ([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;
                </desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</desc>
                <params>
                    <param>1</param>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>format</name>
                <desc>
                    (Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>formatToCharacterIterator</name>
                <desc>(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;</desc>
                <params>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parse</name>
                <desc>(Ljava/lang/String;)[Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>parseObject</name>
                <desc>(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>clone</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>equals</name>
                <desc>(Ljava/lang/Object;)Z</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>hashCode</name>
                <desc>()I</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>findKeyword</name>
                <desc>(Ljava/lang/String;[Ljava/lang/String;)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>copyAndFixQuotes</name>
                <desc>(Ljava/lang/String;IILjava/lang/StringBuilder;)V</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                    <param>3</param>
                </params>
                <ret>false</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.text.BreakIterator</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.text.DateFormatSymbols</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.text.MessageFormat$Field</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>ARGUMENT</name>
                <desc>Ljava/text/MessageFormat$Field;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>&lt;init&gt;</name>
                <desc>(Ljava/lang/String;)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>readResolve</name>
                <desc>()Ljava/lang/Object;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.text.BreakIterator$BreakIteratorCache</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.nio.Buffer</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.nio.channels.FileChannel</name>
        <fields>
            <field>
                <name>NO_ATTRIBUTES</name>
                <desc>[Ljava/nio/file/attribute/FileAttribute;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>open</name>
                <desc>
                    (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;
                </desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>open</name>
                <desc>(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>(Ljava/nio/ByteBuffer;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([Ljava/nio/ByteBuffer;II)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>([Ljava/nio/ByteBuffer;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/nio/ByteBuffer;)I</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([Ljava/nio/ByteBuffer;II)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>([Ljava/nio/ByteBuffer;)J</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>position</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>position</name>
                <desc>(J)Ljava/nio/channels/FileChannel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>size</name>
                <desc>()J</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>truncate</name>
                <desc>(J)Ljava/nio/channels/FileChannel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>force</name>
                <desc>(Z)V</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>transferTo</name>
                <desc>(JJLjava/nio/channels/WritableByteChannel;)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>transferFrom</name>
                <desc>(Ljava/nio/channels/ReadableByteChannel;JJ)J</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>read</name>
                <desc>(Ljava/nio/ByteBuffer;J)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>write</name>
                <desc>(Ljava/nio/ByteBuffer;J)I</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>map</name>
                <desc>(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lock</name>
                <desc>(JJZ)Ljava/nio/channels/FileLock;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>lock</name>
                <desc>()Ljava/nio/channels/FileLock;</desc>
                <params></params>
                <ret>true</ret>
            </method>
            <method>
                <name>tryLock</name>
                <desc>(JJZ)Ljava/nio/channels/FileLock;</desc>
                <params>
                    <param>0</param>
                    <param>1</param>
                    <param>2</param>
                </params>
                <ret>false</ret>
            </method>
            <method>
                <name>truncate</name>
                <desc>(J)Ljava/nio/channels/SeekableByteChannel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
            <method>
                <name>position</name>
                <desc>(J)Ljava/nio/channels/SeekableByteChannel;</desc>
                <params>
                    <param>0</param>
                </params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.nio.channels.FileChannel$MapMode</name>
        <fields>
            <field>
                <name>READ_ONLY</name>
                <desc>Ljava/nio/channels/FileChannel$MapMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>READ_WRITE</name>
                <desc>Ljava/nio/channels/FileChannel$MapMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>PRIVATE</name>
                <desc>Ljava/nio/channels/FileChannel$MapMode;</desc>
                <ret>true</ret>
            </field>
            <field>
                <name>name</name>
                <desc>Ljava/lang/String;</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods>
            <method>
                <name>toString</name>
                <desc>()Ljava/lang/String;</desc>
                <params></params>
                <ret>true</ret>
            </method>
        </methods>
    </class>
    <class>
        <name>java.nio.ByteBuffer</name>
        <fields></fields>
        <methods></methods>
    </class>
    <class>
        <name>java.nio.file.FileSystemException</name>
        <fields>
            <field>
                <name>serialVersionUID</name>
                <desc>J</desc>
                <ret>true</ret>
            </field>
        </fields>
        <methods></methods>
    </class>
</null-stats>